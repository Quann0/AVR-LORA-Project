
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000005ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9b  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000941  00000000  00000000  0000151f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ed  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fa  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d5  00000000  00000000  00002ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000032b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c2       	rjmp	.+1094   	; 0x478 <__vector_12>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c1       	rjmp	.+574    	; 0x288 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 30       	cpi	r26, 0x07	; 7
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	cb d0       	rcall	.+406    	; 0x240 <main>
  aa:	45 c2       	rjmp	.+1162   	; 0x536 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <uart_char_tx>:
uint8_t dataHumi = 0;
uint16_t DataSum = 0;

void uart_char_tx(unsigned char chr) 
{
	while (bit_is_clear(UCSR0A,UDRE0)) { };
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <uart_char_tx>
	UDR0=chr;
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	08 95       	ret

000000b6 <uart1_char_tx>:
}
void uart1_char_tx(char chr)
{
	while (bit_is_clear(UCSR1A,UDRE1)) { };
  b6:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  ba:	95 ff       	sbrs	r25, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <uart1_char_tx>
	UDR1=chr;
  be:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  c2:	08 95       	ret

000000c4 <gui_1_chuoi_dulieu>:
}
void gui_1_chuoi_dulieu( char a[2])
{
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	8c 01       	movw	r16, r24
	for(int i=0;i<strlen(a);i++)
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	06 c0       	rjmp	.+12     	; 0xe0 <gui_1_chuoi_dulieu+0x1c>
	{
		uart1_char_tx(a[i]);
  d4:	f8 01       	movw	r30, r16
  d6:	ec 0f       	add	r30, r28
  d8:	fd 1f       	adc	r31, r29
  da:	80 81       	ld	r24, Z
  dc:	ec df       	rcall	.-40     	; 0xb6 <uart1_char_tx>
	while (bit_is_clear(UCSR1A,UDRE1)) { };
	UDR1=chr;
}
void gui_1_chuoi_dulieu( char a[2])
{
	for(int i=0;i<strlen(a);i++)
  de:	21 96       	adiw	r28, 0x01	; 1
  e0:	f8 01       	movw	r30, r16
  e2:	01 90       	ld	r0, Z+
  e4:	00 20       	and	r0, r0
  e6:	e9 f7       	brne	.-6      	; 0xe2 <gui_1_chuoi_dulieu+0x1e>
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	e0 1b       	sub	r30, r16
  ec:	f1 0b       	sbc	r31, r17
  ee:	ce 17       	cp	r28, r30
  f0:	df 07       	cpc	r29, r31
  f2:	80 f3       	brcs	.-32     	; 0xd4 <gui_1_chuoi_dulieu+0x10>
	{
		uart1_char_tx(a[i]);
	}
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <led7seg>:
void led7seg(uint16_t ADC_val) {
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	8c 01       	movw	r16, r24
	uint16_t nghin,tram,chuc,donvi;
	donvi = ADC_val % 10; //L?y giá tr? ADC chia cho 10 l?y ph?n d? gán vào bi?n donvi.
 10c:	9c 01       	movw	r18, r24
 10e:	ad ec       	ldi	r26, 0xCD	; 205
 110:	bc ec       	ldi	r27, 0xCC	; 204
 112:	02 d2       	rcall	.+1028   	; 0x518 <__umulhisi3>
 114:	ac 01       	movw	r20, r24
 116:	56 95       	lsr	r21
 118:	47 95       	ror	r20
 11a:	56 95       	lsr	r21
 11c:	47 95       	ror	r20
 11e:	56 95       	lsr	r21
 120:	47 95       	ror	r20
 122:	ca 01       	movw	r24, r20
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	44 0f       	add	r20, r20
 12a:	55 1f       	adc	r21, r21
 12c:	44 0f       	add	r20, r20
 12e:	55 1f       	adc	r21, r21
 130:	44 0f       	add	r20, r20
 132:	55 1f       	adc	r21, r21
 134:	48 0f       	add	r20, r24
 136:	59 1f       	adc	r21, r25
 138:	c8 01       	movw	r24, r16
 13a:	84 1b       	sub	r24, r20
 13c:	95 0b       	sbc	r25, r21
 13e:	ac 01       	movw	r20, r24
	ADC_val /= 10; //L?y giá tr? ADC chia cho 10 l?y ph?n nguyên gán vào bi?n ADC_val
 140:	eb d1       	rcall	.+982    	; 0x518 <__umulhisi3>
 142:	ec 01       	movw	r28, r24
 144:	d6 95       	lsr	r29
 146:	c7 95       	ror	r28
 148:	d6 95       	lsr	r29
 14a:	c7 95       	ror	r28
 14c:	d6 95       	lsr	r29
 14e:	c7 95       	ror	r28
	chuc = ADC_val % 10;
 150:	9e 01       	movw	r18, r28
 152:	e2 d1       	rcall	.+964    	; 0x518 <__umulhisi3>
 154:	fc 01       	movw	r30, r24
 156:	f6 95       	lsr	r31
 158:	e7 95       	ror	r30
 15a:	f6 95       	lsr	r31
 15c:	e7 95       	ror	r30
 15e:	f6 95       	lsr	r31
 160:	e7 95       	ror	r30
 162:	cf 01       	movw	r24, r30
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e8 0f       	add	r30, r24
 176:	f9 1f       	adc	r31, r25
 178:	ce 01       	movw	r24, r28
 17a:	8e 1b       	sub	r24, r30
 17c:	9f 0b       	sbc	r25, r31
 17e:	fc 01       	movw	r30, r24
 180:	98 01       	movw	r18, r16
	ADC_val /= 10;
 182:	36 95       	lsr	r19
 184:	27 95       	ror	r18
 186:	36 95       	lsr	r19
 188:	27 95       	ror	r18
 18a:	ab e7       	ldi	r26, 0x7B	; 123
 18c:	b4 e1       	ldi	r27, 0x14	; 20
 18e:	c4 d1       	rcall	.+904    	; 0x518 <__umulhisi3>
 190:	7c 01       	movw	r14, r24
 192:	f6 94       	lsr	r15
 194:	e7 94       	ror	r14
 196:	97 01       	movw	r18, r14
	tram = ADC_val % 10;
 198:	ad ec       	ldi	r26, 0xCD	; 205
 19a:	bc ec       	ldi	r27, 0xCC	; 204
 19c:	bd d1       	rcall	.+890    	; 0x518 <__umulhisi3>
 19e:	ec 01       	movw	r28, r24
 1a0:	d6 95       	lsr	r29
 1a2:	c7 95       	ror	r28
 1a4:	d6 95       	lsr	r29
 1a6:	c7 95       	ror	r28
 1a8:	d6 95       	lsr	r29
 1aa:	c7 95       	ror	r28
 1ac:	ce 01       	movw	r24, r28
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	cc 0f       	add	r28, r28
 1b4:	dd 1f       	adc	r29, r29
 1b6:	cc 0f       	add	r28, r28
 1b8:	dd 1f       	adc	r29, r29
 1ba:	cc 0f       	add	r28, r28
 1bc:	dd 1f       	adc	r29, r29
 1be:	c8 0f       	add	r28, r24
 1c0:	d9 1f       	adc	r29, r25
 1c2:	c7 01       	movw	r24, r14
 1c4:	8c 1b       	sub	r24, r28
 1c6:	9d 0b       	sbc	r25, r29
 1c8:	ec 01       	movw	r28, r24
 1ca:	98 01       	movw	r18, r16
 1cc:	36 95       	lsr	r19
	ADC_val /= 10;
 1ce:	27 95       	ror	r18
 1d0:	36 95       	lsr	r19
 1d2:	27 95       	ror	r18
 1d4:	36 95       	lsr	r19
 1d6:	27 95       	ror	r18
 1d8:	a5 ec       	ldi	r26, 0xC5	; 197
 1da:	b0 e2       	ldi	r27, 0x20	; 32
 1dc:	9d d1       	rcall	.+826    	; 0x518 <__umulhisi3>
 1de:	92 95       	swap	r25
 1e0:	82 95       	swap	r24
 1e2:	8f 70       	andi	r24, 0x0F	; 15
 1e4:	89 27       	eor	r24, r25
 1e6:	9f 70       	andi	r25, 0x0F	; 15
 1e8:	89 27       	eor	r24, r25
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	8b bb       	out	0x1b, r24	; 27
	nghin = ADC_val;
	PORTA = nghin|(1<<PA4);//(1<<PE4):c?p ngu?n cho led hàng ngh?n sau ?ó OR v?i nghin.
 1ee:	8f ec       	ldi	r24, 0xCF	; 207
 1f0:	97 e0       	ldi	r25, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <led7seg+0xf4>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <led7seg+0xfa>
 1f8:	00 00       	nop
 1fa:	c0 62       	ori	r28, 0x20	; 32
 1fc:	cb bb       	out	0x1b, r28	; 27
	_delay_ms(1);
	PORTA = tram|(1<<PA5); //(1<<PE5):c?p ngu?n cho led hàng tr?m sau ?ó OR v?i tram.
 1fe:	8f ec       	ldi	r24, 0xCF	; 207
 200:	97 e0       	ldi	r25, 0x07	; 7
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <led7seg+0x104>
 206:	00 c0       	rjmp	.+0      	; 0x208 <led7seg+0x10a>
 208:	00 00       	nop
 20a:	e0 64       	ori	r30, 0x40	; 64
 20c:	eb bb       	out	0x1b, r30	; 27
	_delay_ms(1);
	PORTA = chuc|(1<<PA6);//(1<<PE6):c?p ngu?n cho led hàng ch?c sau ?ó OR v?i chuc.
 20e:	8f ec       	ldi	r24, 0xCF	; 207
 210:	97 e0       	ldi	r25, 0x07	; 7
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <led7seg+0x114>
 216:	00 c0       	rjmp	.+0      	; 0x218 <led7seg+0x11a>
 218:	00 00       	nop
 21a:	40 68       	ori	r20, 0x80	; 128
 21c:	4b bb       	out	0x1b, r20	; 27
	_delay_ms(1);
	PORTA = donvi|(1<<PA7);//(1<<PE7):c?p ngu?n cho led hàng ??n v? sau ?ó OR v?i donvi.
 21e:	8f ec       	ldi	r24, 0xCF	; 207
 220:	97 e0       	ldi	r25, 0x07	; 7
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <led7seg+0x124>
 226:	00 c0       	rjmp	.+0      	; 0x228 <led7seg+0x12a>
 228:	00 00       	nop
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
	_delay_ms(1);
}
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	08 95       	ret

00000238 <TMR_vInit>:
 238:	1f bc       	out	0x2f, r1	; 47
 23a:	85 e0       	ldi	r24, 0x05	; 5
	/* Start timer 1 with clock prescaler CLK/1024 */
	/* Resolution is 139 us */
	/* Maximum time is 9.1 s */
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<COM1C1)|(0<<COM1C0)|(0<<WGM11)|(0<<WGM10);

	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(1<<CS12)|(0<<CS11)|(1<<CS10);
 23c:	8e bd       	out	0x2e, r24	; 46
 23e:	08 95       	ret

00000240 <main>:
}
volatile unsigned char u_data;
int main(void){
	//Setup
	
	TMR_vInit();	
 240:	fb df       	rcall	.-10     	; 0x238 <TMR_vInit>
	//Baudrate 9600, t?n s? f=8MHz
	DDRA = 0xFF;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
 246:	87 bb       	out	0x17, r24	; 23
	UBRR0H=0;
 248:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=51;
 24c:	83 e3       	ldi	r24, 0x33	; 51
 24e:	89 b9       	out	0x09, r24	; 9
	UBRR1H=0;
 250:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L=51;
 254:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR0A=0x00;
 258:	1b b8       	out	0x0b, r1	; 11
	UCSR0C =(1<<UCSZ01)|(1<<UCSZ00);
 25a:	96 e0       	ldi	r25, 0x06	; 6
 25c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UCSR0B =(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); //cho phép truy?n nh?n d? li?u và cho phép ng?t nh?n
 260:	88 e9       	ldi	r24, 0x98	; 152
 262:	8a b9       	out	0x0a, r24	; 10
	UCSR1A=0x00;
 264:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	
	UCSR1C =(1<<UCSZ11)|(1<<UCSZ10);
 268:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UCSR1B =(1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
 26c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	
	TCCR1A |=(1<<CS11)|(1<<CS10); // CS12=0, CS11=1, CS10=1(chia t?n s? cho 64)
 270:	8f b5       	in	r24, 0x2f	; 47
 272:	83 60       	ori	r24, 0x03	; 3
 274:	8f bd       	out	0x2f, r24	; 47
	OCR1A = 0xF0;
 276:	80 ef       	ldi	r24, 0xF0	; 240
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9b bd       	out	0x2b, r25	; 43
 27c:	8a bd       	out	0x2a, r24	; 42
	TIMSK |=(1<<OCIE1A); //cho phép ng?t tràn c?a T/C1
 27e:	87 b7       	in	r24, 0x37	; 55
 280:	80 61       	ori	r24, 0x10	; 16
 282:	87 bf       	out	0x37, r24	; 55
	sei(); //cho phép ng?t toàn c?c (bit I
 284:	78 94       	sei
 286:	ff cf       	rjmp	.-2      	; 0x286 <main+0x46>

00000288 <__vector_18>:
    while (1) 
    {
    }
}

ISR(USART0_RX_vect) { //hàm ph?c v? ng?t nh?n c?a UART0 thay cho hàm ISR(SIG_UART0_RECV)
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	0b b6       	in	r0, 0x3b	; 59
 294:	0f 92       	push	r0
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	4f 93       	push	r20
 29c:	5f 93       	push	r21
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	u_data=UDR0;
 2ae:	8c b1       	in	r24, 0x0c	; 12
 2b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u_data>
	if(u_data =='1')
 2b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u_data>
 2b8:	81 33       	cpi	r24, 0x31	; 49
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <__vector_18+0x3c>
	{
		PORTB &= ~(1<<PB0);
 2bc:	88 b3       	in	r24, 0x18	; 24
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	88 bb       	out	0x18, r24	; 24
 2c2:	17 c0       	rjmp	.+46     	; 0x2f2 <__vector_18+0x6a>
	}
	else if(u_data =='2')
 2c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u_data>
 2c8:	82 33       	cpi	r24, 0x32	; 50
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <__vector_18+0x4c>
	{
		PORTB |= (1<<PB0);
 2cc:	88 b3       	in	r24, 0x18	; 24
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	88 bb       	out	0x18, r24	; 24
 2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <__vector_18+0x6a>
	}
	else if(u_data =='3')
 2d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u_data>
 2d8:	83 33       	cpi	r24, 0x33	; 51
 2da:	21 f4       	brne	.+8      	; 0x2e4 <__vector_18+0x5c>
	{
		PORTB &= ~(1<<PB0);
 2dc:	88 b3       	in	r24, 0x18	; 24
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	88 bb       	out	0x18, r24	; 24
 2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <__vector_18+0x6a>
	}
	else if(u_data =='4')
 2e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u_data>
 2e8:	84 33       	cpi	r24, 0x34	; 52
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <__vector_18+0x6a>
	{
		PORTB &= ~(1<<PB0);
 2ec:	88 b3       	in	r24, 0x18	; 24
 2ee:	8e 7f       	andi	r24, 0xFE	; 254
 2f0:	88 bb       	out	0x18, r24	; 24
	}
	uart_char_tx(u_data);
 2f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u_data>
 2f6:	db de       	rcall	.-586    	; 0xae <uart_char_tx>
}
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0b be       	out	0x3b, r0	; 59
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <getdata>:
	dataSend[1] = dataHumi;
	//itoa(DataSum,dataSend,10);
	gui_1_chuoi_dulieu(dataSend);
}
/* get data from dht11 */
uint8_t getdata(uint8_t select) {
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	00 d0       	rcall	.+0      	; 0x324 <getdata+0x6>
 324:	00 d0       	rcall	.+0      	; 0x326 <getdata+0x8>
 326:	1f 92       	push	r1
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	68 2f       	mov	r22, r24
	uint8_t bits[5];
	uint8_t i,j = 0;
	
	memset(bits, 0, sizeof(bits));
 32e:	fe 01       	movw	r30, r28
 330:	31 96       	adiw	r30, 0x01	; 1
 332:	95 e0       	ldi	r25, 0x05	; 5
 334:	df 01       	movw	r26, r30
 336:	1d 92       	st	X+, r1
 338:	9a 95       	dec	r25
 33a:	e9 f7       	brne	.-6      	; 0x336 <getdata+0x18>
	
	//reset port
	DHT11_DDR |= (1<<DHT11_INPUTPIN); //output
 33c:	a1 e6       	ldi	r26, 0x61	; 97
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	9c 91       	ld	r25, X
 342:	92 60       	ori	r25, 0x02	; 2
 344:	9c 93       	st	X, r25
	DHT11_PORT |= (1<<DHT11_INPUTPIN); //high
 346:	e2 e6       	ldi	r30, 0x62	; 98
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	90 81       	ld	r25, Z
 34c:	92 60       	ori	r25, 0x02	; 2
 34e:	90 83       	st	Z, r25
 350:	2f ef       	ldi	r18, 0xFF	; 255
 352:	80 e7       	ldi	r24, 0x70	; 112
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	21 50       	subi	r18, 0x01	; 1
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <getdata+0x38>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <getdata+0x42>
 360:	00 00       	nop
	_delay_ms(100);
	
	//send request
	DHT11_PORT &= ~(1<<DHT11_INPUTPIN); //low
 362:	90 81       	ld	r25, Z
 364:	9d 7f       	andi	r25, 0xFD	; 253
 366:	90 83       	st	Z, r25
 368:	8f e9       	ldi	r24, 0x9F	; 159
 36a:	9c e8       	ldi	r25, 0x8C	; 140
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <getdata+0x4e>
 370:	00 c0       	rjmp	.+0      	; 0x372 <getdata+0x54>
 372:	00 00       	nop
	_delay_ms(18);
	//-- MCU pulls up voltage and waits for DHT response (20-40us)
	DHT11_PORT |= (1<<DHT11_INPUTPIN); //high
 374:	90 81       	ld	r25, Z
 376:	92 60       	ori	r25, 0x02	; 2
 378:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	9a 95       	dec	r25
 37e:	f1 f7       	brne	.-4      	; 0x37c <getdata+0x5e>
 380:	00 c0       	rjmp	.+0      	; 0x382 <getdata+0x64>
	_delay_us(1);
	DHT11_DDR &= ~(1<<DHT11_INPUTPIN); //input
 382:	9c 91       	ld	r25, X
 384:	9d 7f       	andi	r25, 0xFD	; 253
 386:	9c 93       	st	X, r25
 388:	a8 e6       	ldi	r26, 0x68	; 104
 38a:	aa 95       	dec	r26
 38c:	f1 f7       	brne	.-4      	; 0x38a <getdata+0x6c>
	_delay_us(39);
	//--
	
	//check start condition 1 (low)
	if((DHT11_PIN & (1<<DHT11_INPUTPIN))) {
 38e:	01 99       	sbic	0x00, 1	; 0
 390:	5a c0       	rjmp	.+180    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 392:	b5 ed       	ldi	r27, 0xD5	; 213
 394:	ba 95       	dec	r27
 396:	f1 f7       	brne	.-4      	; 0x394 <getdata+0x76>
 398:	00 00       	nop
		return DHT11_ERROR;
	}
	_delay_us(80);
	//check start condition 2 (high)
	if(!(DHT11_PIN & (1<<DHT11_INPUTPIN))) {
 39a:	01 9b       	sbis	0x00, 1	; 0
 39c:	56 c0       	rjmp	.+172    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 39e:	25 ed       	ldi	r18, 0xD5	; 213
 3a0:	2a 95       	dec	r18
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <getdata+0x82>
 3a4:	00 00       	nop
		return DHT11_ERROR;
	}
	_delay_us(80);
	
	//read the data
	for (j=0; j<5; j++) { //read 5 byte
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	23 c0       	rjmp	.+70     	; 0x3f0 <getdata+0xd2>
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			while(!(DHT11_PIN & (1<<DHT11_INPUTPIN))); //wait for an high input
 3aa:	01 9b       	sbis	0x00, 1	; 0
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <getdata+0x8c>
 3ae:	a0 e5       	ldi	r26, 0x50	; 80
 3b0:	aa 95       	dec	r26
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <getdata+0x92>
			_delay_us(30);
			if(DHT11_PIN & (1<<DHT11_INPUTPIN)) //if input is high after 30 us, get result
 3b4:	01 9b       	sbis	0x00, 1	; 0
 3b6:	0c c0       	rjmp	.+24     	; 0x3d0 <getdata+0xb2>
			result |= (1<<(7-i));
 3b8:	47 e0       	ldi	r20, 0x07	; 7
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	49 1b       	sub	r20, r25
 3be:	51 09       	sbc	r21, r1
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <getdata+0xac>
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	4a 95       	dec	r20
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <getdata+0xa8>
 3ce:	82 2b       	or	r24, r18
			while(DHT11_PIN & (1<<DHT11_INPUTPIN)); //wait until input get low
 3d0:	01 99       	sbic	0x00, 1	; 0
 3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <getdata+0xb2>
	_delay_us(80);
	
	//read the data
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
 3d4:	9f 5f       	subi	r25, 0xFF	; 255
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <getdata+0xbe>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	98 30       	cpi	r25, 0x08	; 8
 3de:	28 f3       	brcs	.-54     	; 0x3aa <getdata+0x8c>
			_delay_us(30);
			if(DHT11_PIN & (1<<DHT11_INPUTPIN)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
			while(DHT11_PIN & (1<<DHT11_INPUTPIN)); //wait until input get low
		}
		bits[j] = result;
 3e0:	e1 e0       	ldi	r30, 0x01	; 1
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	ec 0f       	add	r30, r28
 3e6:	fd 1f       	adc	r31, r29
 3e8:	e7 0f       	add	r30, r23
 3ea:	f1 1d       	adc	r31, r1
 3ec:	80 83       	st	Z, r24
		return DHT11_ERROR;
	}
	_delay_us(80);
	
	//read the data
	for (j=0; j<5; j++) { //read 5 byte
 3ee:	7f 5f       	subi	r23, 0xFF	; 255
 3f0:	75 30       	cpi	r23, 0x05	; 5
 3f2:	90 f3       	brcs	.-28     	; 0x3d8 <getdata+0xba>
		}
		bits[j] = result;
	}
	
	//reset port
	DHT11_DDR |= (1<<DHT11_INPUTPIN); //output
 3f4:	e1 e6       	ldi	r30, 0x61	; 97
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	80 83       	st	Z, r24
	DHT11_PORT |= (1<<DHT11_INPUTPIN); //low
 3fe:	e2 e6       	ldi	r30, 0x62	; 98
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	82 60       	ori	r24, 0x02	; 2
 406:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 408:	bf ef       	ldi	r27, 0xFF	; 255
 40a:	20 e7       	ldi	r18, 0x70	; 112
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	b1 50       	subi	r27, 0x01	; 1
 410:	20 40       	sbci	r18, 0x00	; 0
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
	_delay_ms(100);
	
	//check checksum
	if (bits[0] + bits[1] + bits[2] + bits[3] == bits[4]) {
 41a:	99 81       	ldd	r25, Y+1	; 0x01
 41c:	2a 81       	ldd	r18, Y+2	; 0x02
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	29 0f       	add	r18, r25
 422:	31 1d       	adc	r19, r1
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	28 0f       	add	r18, r24
 428:	31 1d       	adc	r19, r1
 42a:	4c 81       	ldd	r20, Y+4	; 0x04
 42c:	24 0f       	add	r18, r20
 42e:	31 1d       	adc	r19, r1
 430:	4d 81       	ldd	r20, Y+5	; 0x05
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	24 17       	cp	r18, r20
 436:	35 07       	cpc	r19, r21
 438:	51 f4       	brne	.+20     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		if (select == 0) { //return temperature
 43a:	66 23       	and	r22, r22
 43c:	59 f0       	breq	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			return(bits[2]);
			} else if(select == 1){ //return humidity
 43e:	61 30       	cpi	r22, 0x01	; 1
 440:	41 f0       	breq	.+16     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			return(bits[0]);
		}
	}
	
	return DHT11_ERROR;
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	07 c0       	rjmp	.+14     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	_delay_us(39);
	//--
	
	//check start condition 1 (low)
	if((DHT11_PIN & (1<<DHT11_INPUTPIN))) {
		return DHT11_ERROR;
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	05 c0       	rjmp	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	_delay_us(80);
	//check start condition 2 (high)
	if(!(DHT11_PIN & (1<<DHT11_INPUTPIN))) {
		return DHT11_ERROR;
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	03 c0       	rjmp	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			} else if(select == 1){ //return humidity
			return(bits[0]);
		}
	}
	
	return DHT11_ERROR;
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	01 c0       	rjmp	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	//check checksum
	if (bits[0] + bits[1] + bits[2] + bits[3] == bits[4]) {
		if (select == 0) { //return temperature
			return(bits[2]);
			} else if(select == 1){ //return humidity
			return(bits[0]);
 452:	89 2f       	mov	r24, r25
		}
	}
	
	return DHT11_ERROR;
}
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <dht11_getdata>:

void dht11_getdata(uint8_t num, uint8_t *data){
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	eb 01       	movw	r28, r22
	uint8_t buf = getdata(num);
 46a:	59 df       	rcall	.-334    	; 0x31e <getdata>
	if(buf == DHT11_ERROR){
 46c:	8f 3f       	cpi	r24, 0xFF	; 255
 46e:	09 f0       	breq	.+2      	; 0x472 <dht11_getdata+0xe>
		;
	}
	else{
		*data = buf;
 470:	88 83       	st	Y, r24
	}
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <__vector_12>:
	{
		PORTB &= ~(1<<PB0);
	}
	uart_char_tx(u_data);
}
ISR (TIMER1_COMPA_vect){
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	0b b6       	in	r0, 0x3b	; 59
 484:	0f 92       	push	r0
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	dht11_getdata(0, &datatemp);
 49e:	63 e0       	ldi	r22, 0x03	; 3
 4a0:	71 e0       	ldi	r23, 0x01	; 1
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	df df       	rcall	.-66     	; 0x464 <dht11_getdata>
	dht11_getdata(1, &dataHumi);
 4a6:	62 e0       	ldi	r22, 0x02	; 2
 4a8:	71 e0       	ldi	r23, 0x01	; 1
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	db df       	rcall	.-74     	; 0x464 <dht11_getdata>
	DataSum=datatemp*100+dataHumi;
 4ae:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <datatemp>
 4b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dataHumi>
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	34 e6       	ldi	r19, 0x64	; 100
 4ba:	23 9f       	mul	r18, r19
 4bc:	80 0d       	add	r24, r0
 4be:	91 1d       	adc	r25, r1
 4c0:	11 24       	eor	r1, r1
 4c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	led7seg(DataSum);
 4ca:	19 de       	rcall	.-974    	; 0xfe <led7seg>
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	90 e7       	ldi	r25, 0x70	; 112
 4d0:	22 e0       	ldi	r18, 0x02	; 2
 4d2:	81 50       	subi	r24, 0x01	; 1
 4d4:	90 40       	sbci	r25, 0x00	; 0
 4d6:	20 40       	sbci	r18, 0x00	; 0
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__vector_12+0x5a>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <__vector_12+0x64>
 4dc:	00 00       	nop
	_delay_ms(100);
	dataSend[0] = datatemp;
 4de:	e5 e0       	ldi	r30, 0x05	; 5
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
 4e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <datatemp>
 4e6:	80 83       	st	Z, r24
	dataSend[1] = dataHumi;
 4e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dataHumi>
	//itoa(DataSum,dataSend,10);
	gui_1_chuoi_dulieu(dataSend);
 4ec:	81 83       	std	Z+1, r24	; 0x01
 4ee:	cf 01       	movw	r24, r30
 4f0:	e9 dd       	rcall	.-1070   	; 0xc4 <gui_1_chuoi_dulieu>
}
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	0b be       	out	0x3b, r0	; 59
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__umulhisi3>:
 518:	a2 9f       	mul	r26, r18
 51a:	b0 01       	movw	r22, r0
 51c:	b3 9f       	mul	r27, r19
 51e:	c0 01       	movw	r24, r0
 520:	a3 9f       	mul	r26, r19
 522:	70 0d       	add	r23, r0
 524:	81 1d       	adc	r24, r1
 526:	11 24       	eor	r1, r1
 528:	91 1d       	adc	r25, r1
 52a:	b2 9f       	mul	r27, r18
 52c:	70 0d       	add	r23, r0
 52e:	81 1d       	adc	r24, r1
 530:	11 24       	eor	r1, r1
 532:	91 1d       	adc	r25, r1
 534:	08 95       	ret

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
