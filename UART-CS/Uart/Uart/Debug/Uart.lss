
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000664  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  000006fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c58  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097b  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000497  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00002324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e7  00000000  00000000  000027e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c1       	rjmp	.+728    	; 0x322 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ee d0       	rcall	.+476    	; 0x2a0 <main>
  c4:	cd c2       	rjmp	.+1434   	; 0x660 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <uart_char_tx>:
//char data[4];
char data[2];
const char *fixbug = "0";
void uart_char_tx(unsigned char chr) 
{
	while (bit_is_clear(UCSR0A,UDRE0)) { };
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <uart_char_tx>
	UDR0=chr;
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <uart1_char_tx>:
}
void uart1_char_tx(char chr)
{
	while (bit_is_clear(UCSR1A,UDRE1)) { };
  d0:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <uart1_char_tx>
	UDR1=chr;
  d8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  dc:	08 95       	ret

000000de <gui_1_chuoi_dulieu>:
}
void gui_1_chuoi_dulieu( char a[2])
{
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	8c 01       	movw	r16, r24
	if(strlen(a)==1)
  e8:	fc 01       	movw	r30, r24
  ea:	01 90       	ld	r0, Z+
  ec:	00 20       	and	r0, r0
  ee:	e9 f7       	brne	.-6      	; 0xea <gui_1_chuoi_dulieu+0xc>
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	e8 1b       	sub	r30, r24
  f4:	f9 0b       	sbc	r31, r25
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	51 f4       	brne	.+20     	; 0x10e <gui_1_chuoi_dulieu+0x30>
	{
		a[1] = a[0];
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	81 83       	std	Z+1, r24	; 0x01
		a[0] = *fixbug;
 100:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 108:	80 81       	ld	r24, Z
 10a:	f8 01       	movw	r30, r16
 10c:	80 83       	st	Z, r24
{
	while (bit_is_clear(UCSR1A,UDRE1)) { };
	UDR1=chr;
}
void gui_1_chuoi_dulieu( char a[2])
{
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	06 c0       	rjmp	.+12     	; 0x120 <gui_1_chuoi_dulieu+0x42>
		a[1] = a[0];
		a[0] = *fixbug;
	}
	for(int i=0;i<strlen(a);i++)
	{
		uart1_char_tx(a[i]);
 114:	f8 01       	movw	r30, r16
 116:	ec 0f       	add	r30, r28
 118:	fd 1f       	adc	r31, r29
 11a:	80 81       	ld	r24, Z
 11c:	d9 df       	rcall	.-78     	; 0xd0 <uart1_char_tx>
	if(strlen(a)==1)
	{
		a[1] = a[0];
		a[0] = *fixbug;
	}
	for(int i=0;i<strlen(a);i++)
 11e:	21 96       	adiw	r28, 0x01	; 1
 120:	f8 01       	movw	r30, r16
 122:	01 90       	ld	r0, Z+
 124:	00 20       	and	r0, r0
 126:	e9 f7       	brne	.-6      	; 0x122 <gui_1_chuoi_dulieu+0x44>
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	e0 1b       	sub	r30, r16
 12c:	f1 0b       	sbc	r31, r17
 12e:	ce 17       	cp	r28, r30
 130:	df 07       	cpc	r29, r31
 132:	80 f3       	brcs	.-32     	; 0x114 <gui_1_chuoi_dulieu+0x36>
	{
		uart1_char_tx(a[i]);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <read_adc>:
uint16_t read_adc(unsigned int adc_channel) //adc_channel l?u tham s? kênh ADC c?n ??c.
{
	ADMUX |= adc_channel; //Ch?n kênh ADC.
 13e:	97 b1       	in	r25, 0x07	; 7
 140:	89 2b       	or	r24, r25
 142:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADSC); //Cho phép b?t ??u quá tr?nh chuy?n ??i ADC: l?y giá tr? ?i?n áp vào (Vin) trên kênh ?? ch?n, sau ?ó th?c hi?n chuy?n ??i ADC theo công th?c:
 144:	86 b1       	in	r24, 0x06	; 6
 146:	80 64       	ori	r24, 0x40	; 64
 148:	86 b9       	out	0x06, r24	; 6
	while(bit_is_clear(ADCSRA,ADIF)) //trong khi th?c hi?n chuy?n ??i ADC (bit ADIF = 0).
 14a:	34 9b       	sbis	0x06, 4	; 6
 14c:	fe cf       	rjmp	.-4      	; 0x14a <read_adc+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	2f e7       	ldi	r18, 0x7F	; 127
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <read_adc+0x16>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <read_adc+0x20>
 15e:	00 00       	nop
		; //Ch? trong quá tr?nh chuy?n ??i ADC, sau khi chuy?n ??i xong th? bit ADIF = 1.
	}
	_delay_ms(50);
	//Ho?c có th? s? d?ng l?nh loop nh? sau ?? thay th? cho l?nh while bên trên:
	//	loop_until_bit_is_set(ADCSRA,ADIF);
	return ADCW; //Giá tr? chuy?n ??i ???c l?u vào thanh ghi ADCW 16 bit.
 160:	84 b1       	in	r24, 0x04	; 4
 162:	95 b1       	in	r25, 0x05	; 5
}
 164:	08 95       	ret

00000166 <led7seg>:
void led7seg(uint16_t ADC_val) {
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	8c 01       	movw	r16, r24
	uint16_t nghin,tram,chuc,donvi;
	donvi = ADC_val % 10; //L?y giá tr? ADC chia cho 10 l?y ph?n d? gán vào bi?n donvi.
 174:	9c 01       	movw	r18, r24
 176:	ad ec       	ldi	r26, 0xCD	; 205
 178:	bc ec       	ldi	r27, 0xCC	; 204
 17a:	30 d2       	rcall	.+1120   	; 0x5dc <__umulhisi3>
 17c:	ac 01       	movw	r20, r24
 17e:	56 95       	lsr	r21
 180:	47 95       	ror	r20
 182:	56 95       	lsr	r21
 184:	47 95       	ror	r20
 186:	56 95       	lsr	r21
 188:	47 95       	ror	r20
 18a:	ca 01       	movw	r24, r20
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	48 0f       	add	r20, r24
 19e:	59 1f       	adc	r21, r25
 1a0:	c8 01       	movw	r24, r16
 1a2:	84 1b       	sub	r24, r20
 1a4:	95 0b       	sbc	r25, r21
 1a6:	ac 01       	movw	r20, r24
	ADC_val /= 10; //L?y giá tr? ADC chia cho 10 l?y ph?n nguyên gán vào bi?n ADC_val
 1a8:	19 d2       	rcall	.+1074   	; 0x5dc <__umulhisi3>
 1aa:	ec 01       	movw	r28, r24
 1ac:	d6 95       	lsr	r29
 1ae:	c7 95       	ror	r28
 1b0:	d6 95       	lsr	r29
 1b2:	c7 95       	ror	r28
 1b4:	d6 95       	lsr	r29
 1b6:	c7 95       	ror	r28
	chuc = ADC_val % 10;
 1b8:	9e 01       	movw	r18, r28
 1ba:	10 d2       	rcall	.+1056   	; 0x5dc <__umulhisi3>
 1bc:	fc 01       	movw	r30, r24
 1be:	f6 95       	lsr	r31
 1c0:	e7 95       	ror	r30
 1c2:	f6 95       	lsr	r31
 1c4:	e7 95       	ror	r30
 1c6:	f6 95       	lsr	r31
 1c8:	e7 95       	ror	r30
 1ca:	cf 01       	movw	r24, r30
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	e8 0f       	add	r30, r24
 1de:	f9 1f       	adc	r31, r25
 1e0:	ce 01       	movw	r24, r28
 1e2:	8e 1b       	sub	r24, r30
 1e4:	9f 0b       	sbc	r25, r31
 1e6:	fc 01       	movw	r30, r24
 1e8:	98 01       	movw	r18, r16
	ADC_val /= 10;
 1ea:	36 95       	lsr	r19
 1ec:	27 95       	ror	r18
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	ab e7       	ldi	r26, 0x7B	; 123
 1f4:	b4 e1       	ldi	r27, 0x14	; 20
 1f6:	f2 d1       	rcall	.+996    	; 0x5dc <__umulhisi3>
 1f8:	7c 01       	movw	r14, r24
 1fa:	f6 94       	lsr	r15
 1fc:	e7 94       	ror	r14
 1fe:	97 01       	movw	r18, r14
	tram = ADC_val % 10;
 200:	ad ec       	ldi	r26, 0xCD	; 205
 202:	bc ec       	ldi	r27, 0xCC	; 204
 204:	eb d1       	rcall	.+982    	; 0x5dc <__umulhisi3>
 206:	ec 01       	movw	r28, r24
 208:	d6 95       	lsr	r29
 20a:	c7 95       	ror	r28
 20c:	d6 95       	lsr	r29
 20e:	c7 95       	ror	r28
 210:	d6 95       	lsr	r29
 212:	c7 95       	ror	r28
 214:	ce 01       	movw	r24, r28
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	cc 0f       	add	r28, r28
 21c:	dd 1f       	adc	r29, r29
 21e:	cc 0f       	add	r28, r28
 220:	dd 1f       	adc	r29, r29
 222:	cc 0f       	add	r28, r28
 224:	dd 1f       	adc	r29, r29
 226:	c8 0f       	add	r28, r24
 228:	d9 1f       	adc	r29, r25
 22a:	c7 01       	movw	r24, r14
 22c:	8c 1b       	sub	r24, r28
 22e:	9d 0b       	sbc	r25, r29
 230:	ec 01       	movw	r28, r24
 232:	98 01       	movw	r18, r16
 234:	36 95       	lsr	r19
	ADC_val /= 10;
 236:	27 95       	ror	r18
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	36 95       	lsr	r19
 23e:	27 95       	ror	r18
 240:	a5 ec       	ldi	r26, 0xC5	; 197
 242:	b0 e2       	ldi	r27, 0x20	; 32
 244:	cb d1       	rcall	.+918    	; 0x5dc <__umulhisi3>
 246:	92 95       	swap	r25
 248:	82 95       	swap	r24
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	89 27       	eor	r24, r25
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	89 27       	eor	r24, r25
 252:	80 61       	ori	r24, 0x10	; 16
 254:	8b bb       	out	0x1b, r24	; 27
	nghin = ADC_val;
	PORTA = nghin|(1<<PA4);//(1<<PE4):c?p ngu?n cho led hàng ngh?n sau ?ó OR v?i nghin.
 256:	8f ec       	ldi	r24, 0xCF	; 207
 258:	97 e0       	ldi	r25, 0x07	; 7
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <led7seg+0xf4>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <led7seg+0xfa>
 260:	00 00       	nop
 262:	c0 62       	ori	r28, 0x20	; 32
 264:	cb bb       	out	0x1b, r28	; 27
	_delay_ms(1);
	PORTA = tram|(1<<PA5); //(1<<PE5):c?p ngu?n cho led hàng tr?m sau ?ó OR v?i tram.
 266:	8f ec       	ldi	r24, 0xCF	; 207
 268:	97 e0       	ldi	r25, 0x07	; 7
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <led7seg+0x104>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <led7seg+0x10a>
 270:	00 00       	nop
 272:	e0 64       	ori	r30, 0x40	; 64
 274:	eb bb       	out	0x1b, r30	; 27
	_delay_ms(1);
	PORTA = chuc|(1<<PA6);//(1<<PE6):c?p ngu?n cho led hàng ch?c sau ?ó OR v?i chuc.
 276:	8f ec       	ldi	r24, 0xCF	; 207
 278:	97 e0       	ldi	r25, 0x07	; 7
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <led7seg+0x114>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <led7seg+0x11a>
 280:	00 00       	nop
 282:	40 68       	ori	r20, 0x80	; 128
 284:	4b bb       	out	0x1b, r20	; 27
	_delay_ms(1);
	PORTA = donvi|(1<<PA7);//(1<<PE7):c?p ngu?n cho led hàng ??n v? sau ?ó OR v?i donvi.
 286:	8f ec       	ldi	r24, 0xCF	; 207
 288:	97 e0       	ldi	r25, 0x07	; 7
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <led7seg+0x124>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <led7seg+0x12a>
 290:	00 00       	nop
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
	_delay_ms(1);
}
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	08 95       	ret

000002a0 <main>:
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	8a bb       	out	0x1a, r24	; 26
volatile unsigned char u_data;
int main(void){

	//Baudrate 9600, t?n s? f=8MHz
	DDRA = 0xFF;
	DDRB = 0xff;
 2a4:	87 bb       	out	0x17, r24	; 23
	UBRR0H=0;
 2a6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=51;
 2aa:	83 e3       	ldi	r24, 0x33	; 51
 2ac:	89 b9       	out	0x09, r24	; 9
	UBRR1H=0;
 2ae:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L=51;
 2b2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR0A=0x00;
 2b6:	1b b8       	out	0x0b, r1	; 11
	UCSR0C =(1<<UCSZ01)|(1<<UCSZ00);
 2b8:	86 e0       	ldi	r24, 0x06	; 6
 2ba:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UCSR0B =(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); //cho phép truy?n nh?n d? li?u và cho phép ng?t nh?n
 2be:	98 e9       	ldi	r25, 0x98	; 152
 2c0:	9a b9       	out	0x0a, r25	; 10
	UCSR1A=0x00;
 2c2:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1C =(1<<UCSZ11)|(1<<UCSZ10);
 2c6:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UCSR1B |=(1<<TXEN1)|(1<<TXCIE1);
 2ca:	ea e9       	ldi	r30, 0x9A	; 154
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	88 64       	ori	r24, 0x48	; 72
 2d2:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Ch?n ?i?n áp tham chi?u AVCC
 2d4:	87 b1       	in	r24, 0x07	; 7
 2d6:	80 64       	ori	r24, 0x40	; 64
 2d8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);//Cho phép ADC và ch?n h? s? chia xung nh?p cho ADC là 32.
 2da:	86 b1       	in	r24, 0x06	; 6
 2dc:	85 68       	ori	r24, 0x85	; 133
 2de:	86 b9       	out	0x06, r24	; 6
	sei(); //cho phép ng?t toàn c?c (bit I
 2e0:	78 94       	sei
	uint16_t nhietdo=0;
	//float check=0;
    while (1) 
    {
		
		nhietdo = read_adc(0);
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	2b df       	rcall	.-426    	; 0x13e <read_adc>
		nhietdo = nhietdo*5/10.23;
 2e8:	bc 01       	movw	r22, r24
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	68 0f       	add	r22, r24
 2f4:	79 1f       	adc	r23, r25
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	e2 d0       	rcall	.+452    	; 0x4c0 <__floatunsisf>
 2fc:	24 e1       	ldi	r18, 0x14	; 20
 2fe:	3e ea       	ldi	r19, 0xAE	; 174
 300:	43 e2       	ldi	r20, 0x23	; 35
 302:	51 e4       	ldi	r21, 0x41	; 65
 304:	49 d0       	rcall	.+146    	; 0x398 <__divsf3>
 306:	b0 d0       	rcall	.+352    	; 0x468 <__fixunssfsi>
 308:	6b 01       	movw	r12, r22
 30a:	7c 01       	movw	r14, r24
		led7seg(nhietdo);
 30c:	cb 01       	movw	r24, r22
 30e:	2b df       	rcall	.-426    	; 0x166 <led7seg>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 310:	4a e0       	ldi	r20, 0x0A	; 10
 312:	64 e0       	ldi	r22, 0x04	; 4
 314:	71 e0       	ldi	r23, 0x01	; 1
 316:	c6 01       	movw	r24, r12
 318:	70 d1       	rcall	.+736    	; 0x5fa <__itoa_ncheck>
		itoa(nhietdo,data,10);//convert s? có cõ s? 10->chu?i
		gui_1_chuoi_dulieu(data);	
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	df de       	rcall	.-578    	; 0xde <gui_1_chuoi_dulieu>
 320:	e0 cf       	rjmp	.-64     	; 0x2e2 <main+0x42>

00000322 <__vector_18>:
 322:	1f 92       	push	r1
    }
}

ISR(USART0_RX_vect) { //hàm ph?c v? ng?t nh?n c?a UART0 thay cho hàm ISR(SIG_UART0_RECV)
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	0b b6       	in	r0, 0x3b	; 59
 32e:	0f 92       	push	r0
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	u_data=UDR0;
 348:	8c b1       	in	r24, 0x0c	; 12
 34a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <u_data>
	if(u_data =='1')
 34e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <u_data>
 352:	81 33       	cpi	r24, 0x31	; 49
 354:	21 f4       	brne	.+8      	; 0x35e <__vector_18+0x3c>
	{
		PORTB |= (1<<PB0);
 356:	88 b3       	in	r24, 0x18	; 24
 358:	81 60       	ori	r24, 0x01	; 1
 35a:	88 bb       	out	0x18, r24	; 24
 35c:	07 c0       	rjmp	.+14     	; 0x36c <__vector_18+0x4a>
	}
	else if(u_data =='2')
 35e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <u_data>
 362:	82 33       	cpi	r24, 0x32	; 50
 364:	19 f4       	brne	.+6      	; 0x36c <__vector_18+0x4a>
	{
		PORTB &= ~(1<<PB0);
 366:	88 b3       	in	r24, 0x18	; 24
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	88 bb       	out	0x18, r24	; 24
	}
	uart_char_tx(u_data);
 36c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <u_data>
 370:	ab de       	rcall	.-682    	; 0xc8 <uart_char_tx>
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0b be       	out	0x3b, r0	; 59
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <__divsf3>:
 398:	0c d0       	rcall	.+24     	; 0x3b2 <__divsf3x>
 39a:	e6 c0       	rjmp	.+460    	; 0x568 <__fp_round>
 39c:	de d0       	rcall	.+444    	; 0x55a <__fp_pscB>
 39e:	40 f0       	brcs	.+16     	; 0x3b0 <__divsf3+0x18>
 3a0:	d5 d0       	rcall	.+426    	; 0x54c <__fp_pscA>
 3a2:	30 f0       	brcs	.+12     	; 0x3b0 <__divsf3+0x18>
 3a4:	21 f4       	brne	.+8      	; 0x3ae <__divsf3+0x16>
 3a6:	5f 3f       	cpi	r21, 0xFF	; 255
 3a8:	19 f0       	breq	.+6      	; 0x3b0 <__divsf3+0x18>
 3aa:	c7 c0       	rjmp	.+398    	; 0x53a <__fp_inf>
 3ac:	51 11       	cpse	r21, r1
 3ae:	10 c1       	rjmp	.+544    	; 0x5d0 <__fp_szero>
 3b0:	ca c0       	rjmp	.+404    	; 0x546 <__fp_nan>

000003b2 <__divsf3x>:
 3b2:	eb d0       	rcall	.+470    	; 0x58a <__fp_split3>
 3b4:	98 f3       	brcs	.-26     	; 0x39c <__divsf3+0x4>

000003b6 <__divsf3_pse>:
 3b6:	99 23       	and	r25, r25
 3b8:	c9 f3       	breq	.-14     	; 0x3ac <__divsf3+0x14>
 3ba:	55 23       	and	r21, r21
 3bc:	b1 f3       	breq	.-20     	; 0x3aa <__divsf3+0x12>
 3be:	95 1b       	sub	r25, r21
 3c0:	55 0b       	sbc	r21, r21
 3c2:	bb 27       	eor	r27, r27
 3c4:	aa 27       	eor	r26, r26
 3c6:	62 17       	cp	r22, r18
 3c8:	73 07       	cpc	r23, r19
 3ca:	84 07       	cpc	r24, r20
 3cc:	38 f0       	brcs	.+14     	; 0x3dc <__divsf3_pse+0x26>
 3ce:	9f 5f       	subi	r25, 0xFF	; 255
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19
 3d6:	44 1f       	adc	r20, r20
 3d8:	aa 1f       	adc	r26, r26
 3da:	a9 f3       	breq	.-22     	; 0x3c6 <__divsf3_pse+0x10>
 3dc:	33 d0       	rcall	.+102    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3de:	0e 2e       	mov	r0, r30
 3e0:	3a f0       	brmi	.+14     	; 0x3f0 <__divsf3_pse+0x3a>
 3e2:	e0 e8       	ldi	r30, 0x80	; 128
 3e4:	30 d0       	rcall	.+96     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3e6:	91 50       	subi	r25, 0x01	; 1
 3e8:	50 40       	sbci	r21, 0x00	; 0
 3ea:	e6 95       	lsr	r30
 3ec:	00 1c       	adc	r0, r0
 3ee:	ca f7       	brpl	.-14     	; 0x3e2 <__divsf3_pse+0x2c>
 3f0:	29 d0       	rcall	.+82     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3f2:	fe 2f       	mov	r31, r30
 3f4:	27 d0       	rcall	.+78     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	88 1f       	adc	r24, r24
 3fc:	bb 1f       	adc	r27, r27
 3fe:	26 17       	cp	r18, r22
 400:	37 07       	cpc	r19, r23
 402:	48 07       	cpc	r20, r24
 404:	ab 07       	cpc	r26, r27
 406:	b0 e8       	ldi	r27, 0x80	; 128
 408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	bb 0b       	sbc	r27, r27
 40c:	80 2d       	mov	r24, r0
 40e:	bf 01       	movw	r22, r30
 410:	ff 27       	eor	r31, r31
 412:	93 58       	subi	r25, 0x83	; 131
 414:	5f 4f       	sbci	r21, 0xFF	; 255
 416:	2a f0       	brmi	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 418:	9e 3f       	cpi	r25, 0xFE	; 254
 41a:	51 05       	cpc	r21, r1
 41c:	68 f0       	brcs	.+26     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 41e:	8d c0       	rjmp	.+282    	; 0x53a <__fp_inf>
 420:	d7 c0       	rjmp	.+430    	; 0x5d0 <__fp_szero>
 422:	5f 3f       	cpi	r21, 0xFF	; 255
 424:	ec f3       	brlt	.-6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 426:	98 3e       	cpi	r25, 0xE8	; 232
 428:	dc f3       	brlt	.-10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 42a:	86 95       	lsr	r24
 42c:	77 95       	ror	r23
 42e:	67 95       	ror	r22
 430:	b7 95       	ror	r27
 432:	f7 95       	ror	r31
 434:	9f 5f       	subi	r25, 0xFF	; 255
 436:	c9 f7       	brne	.-14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 438:	88 0f       	add	r24, r24
 43a:	91 1d       	adc	r25, r1
 43c:	96 95       	lsr	r25
 43e:	87 95       	ror	r24
 440:	97 f9       	bld	r25, 7
 442:	08 95       	ret
 444:	e1 e0       	ldi	r30, 0x01	; 1
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	bb 1f       	adc	r27, r27
 44e:	62 17       	cp	r22, r18
 450:	73 07       	cpc	r23, r19
 452:	84 07       	cpc	r24, r20
 454:	ba 07       	cpc	r27, r26
 456:	20 f0       	brcs	.+8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 458:	62 1b       	sub	r22, r18
 45a:	73 0b       	sbc	r23, r19
 45c:	84 0b       	sbc	r24, r20
 45e:	ba 0b       	sbc	r27, r26
 460:	ee 1f       	adc	r30, r30
 462:	88 f7       	brcc	.-30     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 464:	e0 95       	com	r30
 466:	08 95       	ret

00000468 <__fixunssfsi>:
 468:	98 d0       	rcall	.+304    	; 0x59a <__fp_splitA>
 46a:	88 f0       	brcs	.+34     	; 0x48e <__fixunssfsi+0x26>
 46c:	9f 57       	subi	r25, 0x7F	; 127
 46e:	90 f0       	brcs	.+36     	; 0x494 <__fixunssfsi+0x2c>
 470:	b9 2f       	mov	r27, r25
 472:	99 27       	eor	r25, r25
 474:	b7 51       	subi	r27, 0x17	; 23
 476:	a0 f0       	brcs	.+40     	; 0x4a0 <__fixunssfsi+0x38>
 478:	d1 f0       	breq	.+52     	; 0x4ae <__fixunssfsi+0x46>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	1a f0       	brmi	.+6      	; 0x48a <__fixunssfsi+0x22>
 484:	ba 95       	dec	r27
 486:	c9 f7       	brne	.-14     	; 0x47a <__fixunssfsi+0x12>
 488:	12 c0       	rjmp	.+36     	; 0x4ae <__fixunssfsi+0x46>
 48a:	b1 30       	cpi	r27, 0x01	; 1
 48c:	81 f0       	breq	.+32     	; 0x4ae <__fixunssfsi+0x46>
 48e:	9f d0       	rcall	.+318    	; 0x5ce <__fp_zero>
 490:	b1 e0       	ldi	r27, 0x01	; 1
 492:	08 95       	ret
 494:	9c c0       	rjmp	.+312    	; 0x5ce <__fp_zero>
 496:	67 2f       	mov	r22, r23
 498:	78 2f       	mov	r23, r24
 49a:	88 27       	eor	r24, r24
 49c:	b8 5f       	subi	r27, 0xF8	; 248
 49e:	39 f0       	breq	.+14     	; 0x4ae <__fixunssfsi+0x46>
 4a0:	b9 3f       	cpi	r27, 0xF9	; 249
 4a2:	cc f3       	brlt	.-14     	; 0x496 <__fixunssfsi+0x2e>
 4a4:	86 95       	lsr	r24
 4a6:	77 95       	ror	r23
 4a8:	67 95       	ror	r22
 4aa:	b3 95       	inc	r27
 4ac:	d9 f7       	brne	.-10     	; 0x4a4 <__fixunssfsi+0x3c>
 4ae:	3e f4       	brtc	.+14     	; 0x4be <__fixunssfsi+0x56>
 4b0:	90 95       	com	r25
 4b2:	80 95       	com	r24
 4b4:	70 95       	com	r23
 4b6:	61 95       	neg	r22
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	8f 4f       	sbci	r24, 0xFF	; 255
 4bc:	9f 4f       	sbci	r25, 0xFF	; 255
 4be:	08 95       	ret

000004c0 <__floatunsisf>:
 4c0:	e8 94       	clt
 4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <__floatsisf+0x12>

000004c4 <__floatsisf>:
 4c4:	97 fb       	bst	r25, 7
 4c6:	3e f4       	brtc	.+14     	; 0x4d6 <__floatsisf+0x12>
 4c8:	90 95       	com	r25
 4ca:	80 95       	com	r24
 4cc:	70 95       	com	r23
 4ce:	61 95       	neg	r22
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	8f 4f       	sbci	r24, 0xFF	; 255
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	99 23       	and	r25, r25
 4d8:	a9 f0       	breq	.+42     	; 0x504 <__floatsisf+0x40>
 4da:	f9 2f       	mov	r31, r25
 4dc:	96 e9       	ldi	r25, 0x96	; 150
 4de:	bb 27       	eor	r27, r27
 4e0:	93 95       	inc	r25
 4e2:	f6 95       	lsr	r31
 4e4:	87 95       	ror	r24
 4e6:	77 95       	ror	r23
 4e8:	67 95       	ror	r22
 4ea:	b7 95       	ror	r27
 4ec:	f1 11       	cpse	r31, r1
 4ee:	f8 cf       	rjmp	.-16     	; 0x4e0 <__floatsisf+0x1c>
 4f0:	fa f4       	brpl	.+62     	; 0x530 <__floatsisf+0x6c>
 4f2:	bb 0f       	add	r27, r27
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__floatsisf+0x36>
 4f6:	60 ff       	sbrs	r22, 0
 4f8:	1b c0       	rjmp	.+54     	; 0x530 <__floatsisf+0x6c>
 4fa:	6f 5f       	subi	r22, 0xFF	; 255
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	8f 4f       	sbci	r24, 0xFF	; 255
 500:	9f 4f       	sbci	r25, 0xFF	; 255
 502:	16 c0       	rjmp	.+44     	; 0x530 <__floatsisf+0x6c>
 504:	88 23       	and	r24, r24
 506:	11 f0       	breq	.+4      	; 0x50c <__floatsisf+0x48>
 508:	96 e9       	ldi	r25, 0x96	; 150
 50a:	11 c0       	rjmp	.+34     	; 0x52e <__floatsisf+0x6a>
 50c:	77 23       	and	r23, r23
 50e:	21 f0       	breq	.+8      	; 0x518 <__floatsisf+0x54>
 510:	9e e8       	ldi	r25, 0x8E	; 142
 512:	87 2f       	mov	r24, r23
 514:	76 2f       	mov	r23, r22
 516:	05 c0       	rjmp	.+10     	; 0x522 <__floatsisf+0x5e>
 518:	66 23       	and	r22, r22
 51a:	71 f0       	breq	.+28     	; 0x538 <__floatsisf+0x74>
 51c:	96 e8       	ldi	r25, 0x86	; 134
 51e:	86 2f       	mov	r24, r22
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	2a f0       	brmi	.+10     	; 0x530 <__floatsisf+0x6c>
 526:	9a 95       	dec	r25
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	da f7       	brpl	.-10     	; 0x526 <__floatsisf+0x62>
 530:	88 0f       	add	r24, r24
 532:	96 95       	lsr	r25
 534:	87 95       	ror	r24
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <__fp_inf>:
 53a:	97 f9       	bld	r25, 7
 53c:	9f 67       	ori	r25, 0x7F	; 127
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	08 95       	ret

00000546 <__fp_nan>:
 546:	9f ef       	ldi	r25, 0xFF	; 255
 548:	80 ec       	ldi	r24, 0xC0	; 192
 54a:	08 95       	ret

0000054c <__fp_pscA>:
 54c:	00 24       	eor	r0, r0
 54e:	0a 94       	dec	r0
 550:	16 16       	cp	r1, r22
 552:	17 06       	cpc	r1, r23
 554:	18 06       	cpc	r1, r24
 556:	09 06       	cpc	r0, r25
 558:	08 95       	ret

0000055a <__fp_pscB>:
 55a:	00 24       	eor	r0, r0
 55c:	0a 94       	dec	r0
 55e:	12 16       	cp	r1, r18
 560:	13 06       	cpc	r1, r19
 562:	14 06       	cpc	r1, r20
 564:	05 06       	cpc	r0, r21
 566:	08 95       	ret

00000568 <__fp_round>:
 568:	09 2e       	mov	r0, r25
 56a:	03 94       	inc	r0
 56c:	00 0c       	add	r0, r0
 56e:	11 f4       	brne	.+4      	; 0x574 <__fp_round+0xc>
 570:	88 23       	and	r24, r24
 572:	52 f0       	brmi	.+20     	; 0x588 <__fp_round+0x20>
 574:	bb 0f       	add	r27, r27
 576:	40 f4       	brcc	.+16     	; 0x588 <__fp_round+0x20>
 578:	bf 2b       	or	r27, r31
 57a:	11 f4       	brne	.+4      	; 0x580 <__fp_round+0x18>
 57c:	60 ff       	sbrs	r22, 0
 57e:	04 c0       	rjmp	.+8      	; 0x588 <__fp_round+0x20>
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	08 95       	ret

0000058a <__fp_split3>:
 58a:	57 fd       	sbrc	r21, 7
 58c:	90 58       	subi	r25, 0x80	; 128
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	59 f0       	breq	.+22     	; 0x5aa <__fp_splitA+0x10>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	71 f0       	breq	.+28     	; 0x5b4 <__fp_splitA+0x1a>
 598:	47 95       	ror	r20

0000059a <__fp_splitA>:
 59a:	88 0f       	add	r24, r24
 59c:	97 fb       	bst	r25, 7
 59e:	99 1f       	adc	r25, r25
 5a0:	61 f0       	breq	.+24     	; 0x5ba <__fp_splitA+0x20>
 5a2:	9f 3f       	cpi	r25, 0xFF	; 255
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <__fp_splitA+0x2a>
 5a6:	87 95       	ror	r24
 5a8:	08 95       	ret
 5aa:	12 16       	cp	r1, r18
 5ac:	13 06       	cpc	r1, r19
 5ae:	14 06       	cpc	r1, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	f2 cf       	rjmp	.-28     	; 0x598 <__fp_split3+0xe>
 5b4:	46 95       	lsr	r20
 5b6:	f1 df       	rcall	.-30     	; 0x59a <__fp_splitA>
 5b8:	08 c0       	rjmp	.+16     	; 0x5ca <__fp_splitA+0x30>
 5ba:	16 16       	cp	r1, r22
 5bc:	17 06       	cpc	r1, r23
 5be:	18 06       	cpc	r1, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	f1 cf       	rjmp	.-30     	; 0x5a6 <__fp_splitA+0xc>
 5c4:	86 95       	lsr	r24
 5c6:	71 05       	cpc	r23, r1
 5c8:	61 05       	cpc	r22, r1
 5ca:	08 94       	sec
 5cc:	08 95       	ret

000005ce <__fp_zero>:
 5ce:	e8 94       	clt

000005d0 <__fp_szero>:
 5d0:	bb 27       	eor	r27, r27
 5d2:	66 27       	eor	r22, r22
 5d4:	77 27       	eor	r23, r23
 5d6:	cb 01       	movw	r24, r22
 5d8:	97 f9       	bld	r25, 7
 5da:	08 95       	ret

000005dc <__umulhisi3>:
 5dc:	a2 9f       	mul	r26, r18
 5de:	b0 01       	movw	r22, r0
 5e0:	b3 9f       	mul	r27, r19
 5e2:	c0 01       	movw	r24, r0
 5e4:	a3 9f       	mul	r26, r19
 5e6:	70 0d       	add	r23, r0
 5e8:	81 1d       	adc	r24, r1
 5ea:	11 24       	eor	r1, r1
 5ec:	91 1d       	adc	r25, r1
 5ee:	b2 9f       	mul	r27, r18
 5f0:	70 0d       	add	r23, r0
 5f2:	81 1d       	adc	r24, r1
 5f4:	11 24       	eor	r1, r1
 5f6:	91 1d       	adc	r25, r1
 5f8:	08 95       	ret

000005fa <__itoa_ncheck>:
 5fa:	bb 27       	eor	r27, r27
 5fc:	4a 30       	cpi	r20, 0x0A	; 10
 5fe:	31 f4       	brne	.+12     	; 0x60c <__itoa_ncheck+0x12>
 600:	99 23       	and	r25, r25
 602:	22 f4       	brpl	.+8      	; 0x60c <__itoa_ncheck+0x12>
 604:	bd e2       	ldi	r27, 0x2D	; 45
 606:	90 95       	com	r25
 608:	81 95       	neg	r24
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	01 c0       	rjmp	.+2      	; 0x610 <__utoa_common>

0000060e <__utoa_ncheck>:
 60e:	bb 27       	eor	r27, r27

00000610 <__utoa_common>:
 610:	fb 01       	movw	r30, r22
 612:	55 27       	eor	r21, r21
 614:	aa 27       	eor	r26, r26
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	aa 1f       	adc	r26, r26
 61c:	a4 17       	cp	r26, r20
 61e:	10 f0       	brcs	.+4      	; 0x624 <__utoa_common+0x14>
 620:	a4 1b       	sub	r26, r20
 622:	83 95       	inc	r24
 624:	50 51       	subi	r21, 0x10	; 16
 626:	b9 f7       	brne	.-18     	; 0x616 <__utoa_common+0x6>
 628:	a0 5d       	subi	r26, 0xD0	; 208
 62a:	aa 33       	cpi	r26, 0x3A	; 58
 62c:	08 f0       	brcs	.+2      	; 0x630 <__utoa_common+0x20>
 62e:	a9 5d       	subi	r26, 0xD9	; 217
 630:	a1 93       	st	Z+, r26
 632:	00 97       	sbiw	r24, 0x00	; 0
 634:	79 f7       	brne	.-34     	; 0x614 <__utoa_common+0x4>
 636:	b1 11       	cpse	r27, r1
 638:	b1 93       	st	Z+, r27
 63a:	11 92       	st	Z+, r1
 63c:	cb 01       	movw	r24, r22
 63e:	00 c0       	rjmp	.+0      	; 0x640 <strrev>

00000640 <strrev>:
 640:	dc 01       	movw	r26, r24
 642:	fc 01       	movw	r30, r24
 644:	67 2f       	mov	r22, r23
 646:	71 91       	ld	r23, Z+
 648:	77 23       	and	r23, r23
 64a:	e1 f7       	brne	.-8      	; 0x644 <strrev+0x4>
 64c:	32 97       	sbiw	r30, 0x02	; 2
 64e:	04 c0       	rjmp	.+8      	; 0x658 <strrev+0x18>
 650:	7c 91       	ld	r23, X
 652:	6d 93       	st	X+, r22
 654:	70 83       	st	Z, r23
 656:	62 91       	ld	r22, -Z
 658:	ae 17       	cp	r26, r30
 65a:	bf 07       	cpc	r27, r31
 65c:	c8 f3       	brcs	.-14     	; 0x650 <strrev+0x10>
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
