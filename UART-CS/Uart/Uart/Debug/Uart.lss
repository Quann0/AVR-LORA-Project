
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000069c  00000730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  00000734  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf6  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097b  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ce  00000000  00000000  00001e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cc  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000487  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002d83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	88 c1       	rjmp	.+784    	; 0x35a <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f1 d0       	rcall	.+482    	; 0x2a6 <main>
  c4:	e9 c2       	rjmp	.+1490   	; 0x698 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <uart_char_tx>:
//char data[4];
char data[2];
const char *fixbug = "0";
void uart_char_tx(unsigned char chr) 
{
	while (bit_is_clear(UCSR0A,UDRE0)) { };
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <uart_char_tx>
	UDR0=chr;
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <uart1_char_tx>:
}
void uart1_char_tx(char chr)
{
	while (bit_is_clear(UCSR1A,UDRE1)) { };
  d0:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <uart1_char_tx>
	UDR1=chr;
  d8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  dc:	08 95       	ret

000000de <gui_1_chuoi_dulieu>:
}
void gui_1_chuoi_dulieu( char a[2])
{
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	8c 01       	movw	r16, r24
	if(strlen(a)==1)
  e8:	fc 01       	movw	r30, r24
  ea:	01 90       	ld	r0, Z+
  ec:	00 20       	and	r0, r0
  ee:	e9 f7       	brne	.-6      	; 0xea <gui_1_chuoi_dulieu+0xc>
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	e8 1b       	sub	r30, r24
  f4:	f9 0b       	sbc	r31, r25
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	51 f4       	brne	.+20     	; 0x10e <gui_1_chuoi_dulieu+0x30>
	{
		a[1] = a[0];
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	81 83       	std	Z+1, r24	; 0x01
		a[0] = *fixbug;
 100:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 108:	80 81       	ld	r24, Z
 10a:	f8 01       	movw	r30, r16
 10c:	80 83       	st	Z, r24
{
	while (bit_is_clear(UCSR1A,UDRE1)) { };
	UDR1=chr;
}
void gui_1_chuoi_dulieu( char a[2])
{
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	06 c0       	rjmp	.+12     	; 0x120 <gui_1_chuoi_dulieu+0x42>
		a[1] = a[0];
		a[0] = *fixbug;
	}
	for(int i=0;i<strlen(a);i++)
	{
		uart1_char_tx(a[i]);
 114:	f8 01       	movw	r30, r16
 116:	ec 0f       	add	r30, r28
 118:	fd 1f       	adc	r31, r29
 11a:	80 81       	ld	r24, Z
 11c:	d9 df       	rcall	.-78     	; 0xd0 <uart1_char_tx>
	if(strlen(a)==1)
	{
		a[1] = a[0];
		a[0] = *fixbug;
	}
	for(int i=0;i<strlen(a);i++)
 11e:	21 96       	adiw	r28, 0x01	; 1
 120:	f8 01       	movw	r30, r16
 122:	01 90       	ld	r0, Z+
 124:	00 20       	and	r0, r0
 126:	e9 f7       	brne	.-6      	; 0x122 <gui_1_chuoi_dulieu+0x44>
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	e0 1b       	sub	r30, r16
 12c:	f1 0b       	sbc	r31, r17
 12e:	ce 17       	cp	r28, r30
 130:	df 07       	cpc	r29, r31
 132:	80 f3       	brcs	.-32     	; 0x114 <gui_1_chuoi_dulieu+0x36>
	{
		uart1_char_tx(a[i]);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <read_adc>:
uint16_t read_adc(unsigned int adc_channel) //adc_channel l?u tham s? kênh ADC c?n ??c.
{
	ADMUX &= 0xf0;
 13e:	97 b1       	in	r25, 0x07	; 7
 140:	90 7f       	andi	r25, 0xF0	; 240
 142:	97 b9       	out	0x07, r25	; 7
	ADMUX |= adc_channel; //Ch?n kênh ADC.
 144:	97 b1       	in	r25, 0x07	; 7
 146:	89 2b       	or	r24, r25
 148:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADSC); //Cho phép b?t ??u quá tr?nh chuy?n ??i ADC: l?y giá tr? ?i?n áp vào (Vin) trên kênh ?? ch?n, sau ?ó th?c hi?n chuy?n ??i ADC theo công th?c:
 14a:	86 b1       	in	r24, 0x06	; 6
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	86 b9       	out	0x06, r24	; 6
	while(bit_is_clear(ADCSRA,ADIF)) //trong khi th?c hi?n chuy?n ??i ADC (bit ADIF = 0).
 150:	34 9b       	sbis	0x06, 4	; 6
 152:	fe cf       	rjmp	.-4      	; 0x150 <read_adc+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	2f e7       	ldi	r18, 0x7F	; 127
 156:	88 e3       	ldi	r24, 0x38	; 56
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <read_adc+0x1c>
 162:	00 c0       	rjmp	.+0      	; 0x164 <read_adc+0x26>
 164:	00 00       	nop
		; //Ch? trong quá tr?nh chuy?n ??i ADC, sau khi chuy?n ??i xong th? bit ADIF = 1.
	}
	_delay_ms(50);
	//Ho?c có th? s? d?ng l?nh loop nh? sau ?? thay th? cho l?nh while bên trên:
	//	loop_until_bit_is_set(ADCSRA,ADIF);
	return ADCW; //Giá tr? chuy?n ??i ???c l?u vào thanh ghi ADCW 16 bit.
 166:	84 b1       	in	r24, 0x04	; 4
 168:	95 b1       	in	r25, 0x05	; 5
}
 16a:	08 95       	ret

0000016c <led7seg>:
void led7seg(uint16_t ADC_val) {
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	8c 01       	movw	r16, r24
	uint16_t nghin,tram,chuc,donvi;
	donvi = ADC_val % 10; //L?y giá tr? ADC chia cho 10 l?y ph?n d? gán vào bi?n donvi.
 17a:	9c 01       	movw	r18, r24
 17c:	ad ec       	ldi	r26, 0xCD	; 205
 17e:	bc ec       	ldi	r27, 0xCC	; 204
 180:	49 d2       	rcall	.+1170   	; 0x614 <__umulhisi3>
 182:	ac 01       	movw	r20, r24
 184:	56 95       	lsr	r21
 186:	47 95       	ror	r20
 188:	56 95       	lsr	r21
 18a:	47 95       	ror	r20
 18c:	56 95       	lsr	r21
 18e:	47 95       	ror	r20
 190:	ca 01       	movw	r24, r20
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	48 0f       	add	r20, r24
 1a4:	59 1f       	adc	r21, r25
 1a6:	c8 01       	movw	r24, r16
 1a8:	84 1b       	sub	r24, r20
 1aa:	95 0b       	sbc	r25, r21
 1ac:	ac 01       	movw	r20, r24
	ADC_val /= 10; //L?y giá tr? ADC chia cho 10 l?y ph?n nguyên gán vào bi?n ADC_val
 1ae:	32 d2       	rcall	.+1124   	; 0x614 <__umulhisi3>
 1b0:	ec 01       	movw	r28, r24
 1b2:	d6 95       	lsr	r29
 1b4:	c7 95       	ror	r28
 1b6:	d6 95       	lsr	r29
 1b8:	c7 95       	ror	r28
 1ba:	d6 95       	lsr	r29
 1bc:	c7 95       	ror	r28
	chuc = ADC_val % 10;
 1be:	9e 01       	movw	r18, r28
 1c0:	29 d2       	rcall	.+1106   	; 0x614 <__umulhisi3>
 1c2:	fc 01       	movw	r30, r24
 1c4:	f6 95       	lsr	r31
 1c6:	e7 95       	ror	r30
 1c8:	f6 95       	lsr	r31
 1ca:	e7 95       	ror	r30
 1cc:	f6 95       	lsr	r31
 1ce:	e7 95       	ror	r30
 1d0:	cf 01       	movw	r24, r30
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	e8 0f       	add	r30, r24
 1e4:	f9 1f       	adc	r31, r25
 1e6:	ce 01       	movw	r24, r28
 1e8:	8e 1b       	sub	r24, r30
 1ea:	9f 0b       	sbc	r25, r31
 1ec:	fc 01       	movw	r30, r24
 1ee:	98 01       	movw	r18, r16
	ADC_val /= 10;
 1f0:	36 95       	lsr	r19
 1f2:	27 95       	ror	r18
 1f4:	36 95       	lsr	r19
 1f6:	27 95       	ror	r18
 1f8:	ab e7       	ldi	r26, 0x7B	; 123
 1fa:	b4 e1       	ldi	r27, 0x14	; 20
 1fc:	0b d2       	rcall	.+1046   	; 0x614 <__umulhisi3>
 1fe:	7c 01       	movw	r14, r24
 200:	f6 94       	lsr	r15
 202:	e7 94       	ror	r14
 204:	97 01       	movw	r18, r14
	tram = ADC_val % 10;
 206:	ad ec       	ldi	r26, 0xCD	; 205
 208:	bc ec       	ldi	r27, 0xCC	; 204
 20a:	04 d2       	rcall	.+1032   	; 0x614 <__umulhisi3>
 20c:	ec 01       	movw	r28, r24
 20e:	d6 95       	lsr	r29
 210:	c7 95       	ror	r28
 212:	d6 95       	lsr	r29
 214:	c7 95       	ror	r28
 216:	d6 95       	lsr	r29
 218:	c7 95       	ror	r28
 21a:	ce 01       	movw	r24, r28
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	cc 0f       	add	r28, r28
 222:	dd 1f       	adc	r29, r29
 224:	cc 0f       	add	r28, r28
 226:	dd 1f       	adc	r29, r29
 228:	cc 0f       	add	r28, r28
 22a:	dd 1f       	adc	r29, r29
 22c:	c8 0f       	add	r28, r24
 22e:	d9 1f       	adc	r29, r25
 230:	c7 01       	movw	r24, r14
 232:	8c 1b       	sub	r24, r28
 234:	9d 0b       	sbc	r25, r29
 236:	ec 01       	movw	r28, r24
 238:	98 01       	movw	r18, r16
 23a:	36 95       	lsr	r19
	ADC_val /= 10;
 23c:	27 95       	ror	r18
 23e:	36 95       	lsr	r19
 240:	27 95       	ror	r18
 242:	36 95       	lsr	r19
 244:	27 95       	ror	r18
 246:	a5 ec       	ldi	r26, 0xC5	; 197
 248:	b0 e2       	ldi	r27, 0x20	; 32
 24a:	e4 d1       	rcall	.+968    	; 0x614 <__umulhisi3>
 24c:	92 95       	swap	r25
 24e:	82 95       	swap	r24
 250:	8f 70       	andi	r24, 0x0F	; 15
 252:	89 27       	eor	r24, r25
 254:	9f 70       	andi	r25, 0x0F	; 15
 256:	89 27       	eor	r24, r25
 258:	80 61       	ori	r24, 0x10	; 16
 25a:	8b bb       	out	0x1b, r24	; 27
	nghin = ADC_val;
	PORTA = nghin|(1<<PA4);//(1<<PE4):c?p ngu?n cho led hàng ngh?n sau ?ó OR v?i nghin.
 25c:	8f ec       	ldi	r24, 0xCF	; 207
 25e:	97 e0       	ldi	r25, 0x07	; 7
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <led7seg+0xf4>
 264:	00 c0       	rjmp	.+0      	; 0x266 <led7seg+0xfa>
 266:	00 00       	nop
 268:	c0 62       	ori	r28, 0x20	; 32
 26a:	cb bb       	out	0x1b, r28	; 27
	_delay_ms(1);
	PORTA = tram|(1<<PA5); //(1<<PE5):c?p ngu?n cho led hàng tr?m sau ?ó OR v?i tram.
 26c:	8f ec       	ldi	r24, 0xCF	; 207
 26e:	97 e0       	ldi	r25, 0x07	; 7
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <led7seg+0x104>
 274:	00 c0       	rjmp	.+0      	; 0x276 <led7seg+0x10a>
 276:	00 00       	nop
 278:	e0 64       	ori	r30, 0x40	; 64
 27a:	eb bb       	out	0x1b, r30	; 27
	_delay_ms(1);
	PORTA = chuc|(1<<PA6);//(1<<PE6):c?p ngu?n cho led hàng ch?c sau ?ó OR v?i chuc.
 27c:	8f ec       	ldi	r24, 0xCF	; 207
 27e:	97 e0       	ldi	r25, 0x07	; 7
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <led7seg+0x114>
 284:	00 c0       	rjmp	.+0      	; 0x286 <led7seg+0x11a>
 286:	00 00       	nop
 288:	40 68       	ori	r20, 0x80	; 128
 28a:	4b bb       	out	0x1b, r20	; 27
	_delay_ms(1);
	PORTA = donvi|(1<<PA7);//(1<<PE7):c?p ngu?n cho led hàng ??n v? sau ?ó OR v?i donvi.
 28c:	8f ec       	ldi	r24, 0xCF	; 207
 28e:	97 e0       	ldi	r25, 0x07	; 7
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <led7seg+0x124>
 294:	00 c0       	rjmp	.+0      	; 0x296 <led7seg+0x12a>
 296:	00 00       	nop
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
	_delay_ms(1);
}
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	08 95       	ret

000002a6 <main>:
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	8a bb       	out	0x1a, r24	; 26
volatile unsigned char u_data;
int main(void){

	//Baudrate 9600, t?n s? f=8MHz
	DDRA = 0xFF;
	DDRB = 0xff;
 2aa:	87 bb       	out	0x17, r24	; 23
	UBRR0H=0;
 2ac:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=51;
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	89 b9       	out	0x09, r24	; 9
	UBRR1H=0;
 2b4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L=51;
 2b8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR0A=0x00;
 2bc:	1b b8       	out	0x0b, r1	; 11
	UCSR0C =(1<<UCSZ01)|(1<<UCSZ00);
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UCSR0B =(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); //cho phép truy?n nh?n d? li?u và cho phép ng?t nh?n
 2c4:	98 e9       	ldi	r25, 0x98	; 152
 2c6:	9a b9       	out	0x0a, r25	; 10
	UCSR1A=0x00;
 2c8:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1C =(1<<UCSZ11)|(1<<UCSZ10);
 2cc:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UCSR1B |=(1<<TXEN1)|(1<<TXCIE1);
 2d0:	ea e9       	ldi	r30, 0x9A	; 154
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	88 64       	ori	r24, 0x48	; 72
 2d8:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Ch?n ?i?n áp tham chi?u AVCC
 2da:	87 b1       	in	r24, 0x07	; 7
 2dc:	80 64       	ori	r24, 0x40	; 64
 2de:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);//Cho phép ADC và ch?n h? s? chia xung nh?p cho ADC là 32.
 2e0:	86 b1       	in	r24, 0x06	; 6
 2e2:	85 68       	ori	r24, 0x85	; 133
 2e4:	86 b9       	out	0x06, r24	; 6
	sei(); //cho phép ng?t toàn c?c (bit I
 2e6:	78 94       	sei
    /* Replace with your application code */
	uint16_t nhietdo=0;
	uint16_t nhietdo1 = 0;
    while (1) 
    {
		nhietdo = read_adc(0);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	28 df       	rcall	.-432    	; 0x13e <read_adc>
 2ee:	ec 01       	movw	r28, r24
		nhietdo1 = read_adc(1);
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	24 df       	rcall	.-440    	; 0x13e <read_adc>
		nhietdo1 = nhietdo>>8 & 0xff;
		nhietdo = nhietdo*5/10.23;
 2f6:	be 01       	movw	r22, r28
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	6c 0f       	add	r22, r28
 302:	7d 1f       	adc	r23, r29
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	f7 d0       	rcall	.+494    	; 0x4f8 <__floatunsisf>
 30a:	24 e1       	ldi	r18, 0x14	; 20
 30c:	3e ea       	ldi	r19, 0xAE	; 174
 30e:	43 e2       	ldi	r20, 0x23	; 35
 310:	51 e4       	ldi	r21, 0x41	; 65
 312:	5e d0       	rcall	.+188    	; 0x3d0 <__divsf3>
 314:	c5 d0       	rcall	.+394    	; 0x4a0 <__fixunssfsi>
 316:	6b 01       	movw	r12, r22
		led7seg(nhietdo);
 318:	7c 01       	movw	r14, r24
 31a:	cb 01       	movw	r24, r22
 31c:	27 df       	rcall	.-434    	; 0x16c <led7seg>
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	84 e3       	ldi	r24, 0x34	; 52
 322:	9c e0       	ldi	r25, 0x0C	; 12
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x7e>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x88>
		_delay_ms(500);
		led7seg(nhietdo1);
 32e:	00 00       	nop
 330:	8d 2f       	mov	r24, r29
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	1b df       	rcall	.-458    	; 0x16c <led7seg>
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	84 e3       	ldi	r24, 0x34	; 52
 33a:	9c e0       	ldi	r25, 0x0C	; 12
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x96>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0xa0>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 346:	00 00       	nop
 348:	4a e0       	ldi	r20, 0x0A	; 10
 34a:	64 e0       	ldi	r22, 0x04	; 4
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	c6 01       	movw	r24, r12
		_delay_ms(500);
		itoa(nhietdo,data,10);//convert s? có cõ s? 10->chu?i
		gui_1_chuoi_dulieu(data);	
 350:	70 d1       	rcall	.+736    	; 0x632 <__itoa_ncheck>
 352:	84 e0       	ldi	r24, 0x04	; 4
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	c3 de       	rcall	.-634    	; 0xde <gui_1_chuoi_dulieu>
 358:	c7 cf       	rjmp	.-114    	; 0x2e8 <main+0x42>

0000035a <__vector_18>:
    }
}

ISR(USART0_RX_vect) { //hàm ph?c v? ng?t nh?n c?a UART0 thay cho hàm ISR(SIG_UART0_RECV)
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	0b b6       	in	r0, 0x3b	; 59
 366:	0f 92       	push	r0
 368:	2f 93       	push	r18
 36a:	3f 93       	push	r19
 36c:	4f 93       	push	r20
 36e:	5f 93       	push	r21
 370:	6f 93       	push	r22
 372:	7f 93       	push	r23
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	af 93       	push	r26
 37a:	bf 93       	push	r27
 37c:	ef 93       	push	r30
 37e:	ff 93       	push	r31
	u_data=UDR0;
 380:	8c b1       	in	r24, 0x0c	; 12
 382:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <u_data>
	if(u_data =='2')
 386:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <u_data>
 38a:	82 33       	cpi	r24, 0x32	; 50
 38c:	21 f4       	brne	.+8      	; 0x396 <__vector_18+0x3c>
	{
		PORTB |= (1<<PB0);
 38e:	88 b3       	in	r24, 0x18	; 24
 390:	81 60       	ori	r24, 0x01	; 1
 392:	88 bb       	out	0x18, r24	; 24
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <__vector_18+0x4a>
	}
	else if(u_data =='1')
 396:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <u_data>
 39a:	81 33       	cpi	r24, 0x31	; 49
 39c:	19 f4       	brne	.+6      	; 0x3a4 <__vector_18+0x4a>
	{
		PORTB &= ~(1<<PB0);
 39e:	88 b3       	in	r24, 0x18	; 24
 3a0:	8e 7f       	andi	r24, 0xFE	; 254
 3a2:	88 bb       	out	0x18, r24	; 24
	}
	uart_char_tx(u_data);
 3a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <u_data>
 3a8:	8f de       	rcall	.-738    	; 0xc8 <uart_char_tx>
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0b be       	out	0x3b, r0	; 59
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__divsf3>:
 3d0:	0c d0       	rcall	.+24     	; 0x3ea <__divsf3x>
 3d2:	e6 c0       	rjmp	.+460    	; 0x5a0 <__fp_round>
 3d4:	de d0       	rcall	.+444    	; 0x592 <__fp_pscB>
 3d6:	40 f0       	brcs	.+16     	; 0x3e8 <__divsf3+0x18>
 3d8:	d5 d0       	rcall	.+426    	; 0x584 <__fp_pscA>
 3da:	30 f0       	brcs	.+12     	; 0x3e8 <__divsf3+0x18>
 3dc:	21 f4       	brne	.+8      	; 0x3e6 <__divsf3+0x16>
 3de:	5f 3f       	cpi	r21, 0xFF	; 255
 3e0:	19 f0       	breq	.+6      	; 0x3e8 <__divsf3+0x18>
 3e2:	c7 c0       	rjmp	.+398    	; 0x572 <__fp_inf>
 3e4:	51 11       	cpse	r21, r1
 3e6:	10 c1       	rjmp	.+544    	; 0x608 <__fp_szero>
 3e8:	ca c0       	rjmp	.+404    	; 0x57e <__fp_nan>

000003ea <__divsf3x>:
 3ea:	eb d0       	rcall	.+470    	; 0x5c2 <__fp_split3>
 3ec:	98 f3       	brcs	.-26     	; 0x3d4 <__divsf3+0x4>

000003ee <__divsf3_pse>:
 3ee:	99 23       	and	r25, r25
 3f0:	c9 f3       	breq	.-14     	; 0x3e4 <__divsf3+0x14>
 3f2:	55 23       	and	r21, r21
 3f4:	b1 f3       	breq	.-20     	; 0x3e2 <__divsf3+0x12>
 3f6:	95 1b       	sub	r25, r21
 3f8:	55 0b       	sbc	r21, r21
 3fa:	bb 27       	eor	r27, r27
 3fc:	aa 27       	eor	r26, r26
 3fe:	62 17       	cp	r22, r18
 400:	73 07       	cpc	r23, r19
 402:	84 07       	cpc	r24, r20
 404:	38 f0       	brcs	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 406:	9f 5f       	subi	r25, 0xFF	; 255
 408:	5f 4f       	sbci	r21, 0xFF	; 255
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	44 1f       	adc	r20, r20
 410:	aa 1f       	adc	r26, r26
 412:	a9 f3       	breq	.-22     	; 0x3fe <__divsf3_pse+0x10>
 414:	33 d0       	rcall	.+102    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 416:	0e 2e       	mov	r0, r30
 418:	3a f0       	brmi	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41a:	e0 e8       	ldi	r30, 0x80	; 128
 41c:	30 d0       	rcall	.+96     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 41e:	91 50       	subi	r25, 0x01	; 1
 420:	50 40       	sbci	r21, 0x00	; 0
 422:	e6 95       	lsr	r30
 424:	00 1c       	adc	r0, r0
 426:	ca f7       	brpl	.-14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 428:	29 d0       	rcall	.+82     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 42a:	fe 2f       	mov	r31, r30
 42c:	27 d0       	rcall	.+78     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	88 1f       	adc	r24, r24
 434:	bb 1f       	adc	r27, r27
 436:	26 17       	cp	r18, r22
 438:	37 07       	cpc	r19, r23
 43a:	48 07       	cpc	r20, r24
 43c:	ab 07       	cpc	r26, r27
 43e:	b0 e8       	ldi	r27, 0x80	; 128
 440:	09 f0       	breq	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	bb 0b       	sbc	r27, r27
 444:	80 2d       	mov	r24, r0
 446:	bf 01       	movw	r22, r30
 448:	ff 27       	eor	r31, r31
 44a:	93 58       	subi	r25, 0x83	; 131
 44c:	5f 4f       	sbci	r21, 0xFF	; 255
 44e:	2a f0       	brmi	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 450:	9e 3f       	cpi	r25, 0xFE	; 254
 452:	51 05       	cpc	r21, r1
 454:	68 f0       	brcs	.+26     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 456:	8d c0       	rjmp	.+282    	; 0x572 <__fp_inf>
 458:	d7 c0       	rjmp	.+430    	; 0x608 <__fp_szero>
 45a:	5f 3f       	cpi	r21, 0xFF	; 255
 45c:	ec f3       	brlt	.-6      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 45e:	98 3e       	cpi	r25, 0xE8	; 232
 460:	dc f3       	brlt	.-10     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 462:	86 95       	lsr	r24
 464:	77 95       	ror	r23
 466:	67 95       	ror	r22
 468:	b7 95       	ror	r27
 46a:	f7 95       	ror	r31
 46c:	9f 5f       	subi	r25, 0xFF	; 255
 46e:	c9 f7       	brne	.-14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 470:	88 0f       	add	r24, r24
 472:	91 1d       	adc	r25, r1
 474:	96 95       	lsr	r25
 476:	87 95       	ror	r24
 478:	97 f9       	bld	r25, 7
 47a:	08 95       	ret
 47c:	e1 e0       	ldi	r30, 0x01	; 1
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	88 1f       	adc	r24, r24
 484:	bb 1f       	adc	r27, r27
 486:	62 17       	cp	r22, r18
 488:	73 07       	cpc	r23, r19
 48a:	84 07       	cpc	r24, r20
 48c:	ba 07       	cpc	r27, r26
 48e:	20 f0       	brcs	.+8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 490:	62 1b       	sub	r22, r18
 492:	73 0b       	sbc	r23, r19
 494:	84 0b       	sbc	r24, r20
 496:	ba 0b       	sbc	r27, r26
 498:	ee 1f       	adc	r30, r30
 49a:	88 f7       	brcc	.-30     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 49c:	e0 95       	com	r30
 49e:	08 95       	ret

000004a0 <__fixunssfsi>:
 4a0:	98 d0       	rcall	.+304    	; 0x5d2 <__fp_splitA>
 4a2:	88 f0       	brcs	.+34     	; 0x4c6 <__fixunssfsi+0x26>
 4a4:	9f 57       	subi	r25, 0x7F	; 127
 4a6:	90 f0       	brcs	.+36     	; 0x4cc <__fixunssfsi+0x2c>
 4a8:	b9 2f       	mov	r27, r25
 4aa:	99 27       	eor	r25, r25
 4ac:	b7 51       	subi	r27, 0x17	; 23
 4ae:	a0 f0       	brcs	.+40     	; 0x4d8 <__fixunssfsi+0x38>
 4b0:	d1 f0       	breq	.+52     	; 0x4e6 <__fixunssfsi+0x46>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	1a f0       	brmi	.+6      	; 0x4c2 <__fixunssfsi+0x22>
 4bc:	ba 95       	dec	r27
 4be:	c9 f7       	brne	.-14     	; 0x4b2 <__fixunssfsi+0x12>
 4c0:	12 c0       	rjmp	.+36     	; 0x4e6 <__fixunssfsi+0x46>
 4c2:	b1 30       	cpi	r27, 0x01	; 1
 4c4:	81 f0       	breq	.+32     	; 0x4e6 <__fixunssfsi+0x46>
 4c6:	9f d0       	rcall	.+318    	; 0x606 <__fp_zero>
 4c8:	b1 e0       	ldi	r27, 0x01	; 1
 4ca:	08 95       	ret
 4cc:	9c c0       	rjmp	.+312    	; 0x606 <__fp_zero>
 4ce:	67 2f       	mov	r22, r23
 4d0:	78 2f       	mov	r23, r24
 4d2:	88 27       	eor	r24, r24
 4d4:	b8 5f       	subi	r27, 0xF8	; 248
 4d6:	39 f0       	breq	.+14     	; 0x4e6 <__fixunssfsi+0x46>
 4d8:	b9 3f       	cpi	r27, 0xF9	; 249
 4da:	cc f3       	brlt	.-14     	; 0x4ce <__fixunssfsi+0x2e>
 4dc:	86 95       	lsr	r24
 4de:	77 95       	ror	r23
 4e0:	67 95       	ror	r22
 4e2:	b3 95       	inc	r27
 4e4:	d9 f7       	brne	.-10     	; 0x4dc <__fixunssfsi+0x3c>
 4e6:	3e f4       	brtc	.+14     	; 0x4f6 <__fixunssfsi+0x56>
 4e8:	90 95       	com	r25
 4ea:	80 95       	com	r24
 4ec:	70 95       	com	r23
 4ee:	61 95       	neg	r22
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	08 95       	ret

000004f8 <__floatunsisf>:
 4f8:	e8 94       	clt
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <__floatsisf+0x12>

000004fc <__floatsisf>:
 4fc:	97 fb       	bst	r25, 7
 4fe:	3e f4       	brtc	.+14     	; 0x50e <__floatsisf+0x12>
 500:	90 95       	com	r25
 502:	80 95       	com	r24
 504:	70 95       	com	r23
 506:	61 95       	neg	r22
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	8f 4f       	sbci	r24, 0xFF	; 255
 50c:	9f 4f       	sbci	r25, 0xFF	; 255
 50e:	99 23       	and	r25, r25
 510:	a9 f0       	breq	.+42     	; 0x53c <__floatsisf+0x40>
 512:	f9 2f       	mov	r31, r25
 514:	96 e9       	ldi	r25, 0x96	; 150
 516:	bb 27       	eor	r27, r27
 518:	93 95       	inc	r25
 51a:	f6 95       	lsr	r31
 51c:	87 95       	ror	r24
 51e:	77 95       	ror	r23
 520:	67 95       	ror	r22
 522:	b7 95       	ror	r27
 524:	f1 11       	cpse	r31, r1
 526:	f8 cf       	rjmp	.-16     	; 0x518 <__floatsisf+0x1c>
 528:	fa f4       	brpl	.+62     	; 0x568 <__floatsisf+0x6c>
 52a:	bb 0f       	add	r27, r27
 52c:	11 f4       	brne	.+4      	; 0x532 <__floatsisf+0x36>
 52e:	60 ff       	sbrs	r22, 0
 530:	1b c0       	rjmp	.+54     	; 0x568 <__floatsisf+0x6c>
 532:	6f 5f       	subi	r22, 0xFF	; 255
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	8f 4f       	sbci	r24, 0xFF	; 255
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	16 c0       	rjmp	.+44     	; 0x568 <__floatsisf+0x6c>
 53c:	88 23       	and	r24, r24
 53e:	11 f0       	breq	.+4      	; 0x544 <__floatsisf+0x48>
 540:	96 e9       	ldi	r25, 0x96	; 150
 542:	11 c0       	rjmp	.+34     	; 0x566 <__floatsisf+0x6a>
 544:	77 23       	and	r23, r23
 546:	21 f0       	breq	.+8      	; 0x550 <__floatsisf+0x54>
 548:	9e e8       	ldi	r25, 0x8E	; 142
 54a:	87 2f       	mov	r24, r23
 54c:	76 2f       	mov	r23, r22
 54e:	05 c0       	rjmp	.+10     	; 0x55a <__floatsisf+0x5e>
 550:	66 23       	and	r22, r22
 552:	71 f0       	breq	.+28     	; 0x570 <__floatsisf+0x74>
 554:	96 e8       	ldi	r25, 0x86	; 134
 556:	86 2f       	mov	r24, r22
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	2a f0       	brmi	.+10     	; 0x568 <__floatsisf+0x6c>
 55e:	9a 95       	dec	r25
 560:	66 0f       	add	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	da f7       	brpl	.-10     	; 0x55e <__floatsisf+0x62>
 568:	88 0f       	add	r24, r24
 56a:	96 95       	lsr	r25
 56c:	87 95       	ror	r24
 56e:	97 f9       	bld	r25, 7
 570:	08 95       	ret

00000572 <__fp_inf>:
 572:	97 f9       	bld	r25, 7
 574:	9f 67       	ori	r25, 0x7F	; 127
 576:	80 e8       	ldi	r24, 0x80	; 128
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	08 95       	ret

0000057e <__fp_nan>:
 57e:	9f ef       	ldi	r25, 0xFF	; 255
 580:	80 ec       	ldi	r24, 0xC0	; 192
 582:	08 95       	ret

00000584 <__fp_pscA>:
 584:	00 24       	eor	r0, r0
 586:	0a 94       	dec	r0
 588:	16 16       	cp	r1, r22
 58a:	17 06       	cpc	r1, r23
 58c:	18 06       	cpc	r1, r24
 58e:	09 06       	cpc	r0, r25
 590:	08 95       	ret

00000592 <__fp_pscB>:
 592:	00 24       	eor	r0, r0
 594:	0a 94       	dec	r0
 596:	12 16       	cp	r1, r18
 598:	13 06       	cpc	r1, r19
 59a:	14 06       	cpc	r1, r20
 59c:	05 06       	cpc	r0, r21
 59e:	08 95       	ret

000005a0 <__fp_round>:
 5a0:	09 2e       	mov	r0, r25
 5a2:	03 94       	inc	r0
 5a4:	00 0c       	add	r0, r0
 5a6:	11 f4       	brne	.+4      	; 0x5ac <__fp_round+0xc>
 5a8:	88 23       	and	r24, r24
 5aa:	52 f0       	brmi	.+20     	; 0x5c0 <__fp_round+0x20>
 5ac:	bb 0f       	add	r27, r27
 5ae:	40 f4       	brcc	.+16     	; 0x5c0 <__fp_round+0x20>
 5b0:	bf 2b       	or	r27, r31
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <__fp_round+0x18>
 5b4:	60 ff       	sbrs	r22, 0
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__fp_round+0x20>
 5b8:	6f 5f       	subi	r22, 0xFF	; 255
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	08 95       	ret

000005c2 <__fp_split3>:
 5c2:	57 fd       	sbrc	r21, 7
 5c4:	90 58       	subi	r25, 0x80	; 128
 5c6:	44 0f       	add	r20, r20
 5c8:	55 1f       	adc	r21, r21
 5ca:	59 f0       	breq	.+22     	; 0x5e2 <__fp_splitA+0x10>
 5cc:	5f 3f       	cpi	r21, 0xFF	; 255
 5ce:	71 f0       	breq	.+28     	; 0x5ec <__fp_splitA+0x1a>
 5d0:	47 95       	ror	r20

000005d2 <__fp_splitA>:
 5d2:	88 0f       	add	r24, r24
 5d4:	97 fb       	bst	r25, 7
 5d6:	99 1f       	adc	r25, r25
 5d8:	61 f0       	breq	.+24     	; 0x5f2 <__fp_splitA+0x20>
 5da:	9f 3f       	cpi	r25, 0xFF	; 255
 5dc:	79 f0       	breq	.+30     	; 0x5fc <__fp_splitA+0x2a>
 5de:	87 95       	ror	r24
 5e0:	08 95       	ret
 5e2:	12 16       	cp	r1, r18
 5e4:	13 06       	cpc	r1, r19
 5e6:	14 06       	cpc	r1, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	f2 cf       	rjmp	.-28     	; 0x5d0 <__fp_split3+0xe>
 5ec:	46 95       	lsr	r20
 5ee:	f1 df       	rcall	.-30     	; 0x5d2 <__fp_splitA>
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <__fp_splitA+0x30>
 5f2:	16 16       	cp	r1, r22
 5f4:	17 06       	cpc	r1, r23
 5f6:	18 06       	cpc	r1, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	f1 cf       	rjmp	.-30     	; 0x5de <__fp_splitA+0xc>
 5fc:	86 95       	lsr	r24
 5fe:	71 05       	cpc	r23, r1
 600:	61 05       	cpc	r22, r1
 602:	08 94       	sec
 604:	08 95       	ret

00000606 <__fp_zero>:
 606:	e8 94       	clt

00000608 <__fp_szero>:
 608:	bb 27       	eor	r27, r27
 60a:	66 27       	eor	r22, r22
 60c:	77 27       	eor	r23, r23
 60e:	cb 01       	movw	r24, r22
 610:	97 f9       	bld	r25, 7
 612:	08 95       	ret

00000614 <__umulhisi3>:
 614:	a2 9f       	mul	r26, r18
 616:	b0 01       	movw	r22, r0
 618:	b3 9f       	mul	r27, r19
 61a:	c0 01       	movw	r24, r0
 61c:	a3 9f       	mul	r26, r19
 61e:	70 0d       	add	r23, r0
 620:	81 1d       	adc	r24, r1
 622:	11 24       	eor	r1, r1
 624:	91 1d       	adc	r25, r1
 626:	b2 9f       	mul	r27, r18
 628:	70 0d       	add	r23, r0
 62a:	81 1d       	adc	r24, r1
 62c:	11 24       	eor	r1, r1
 62e:	91 1d       	adc	r25, r1
 630:	08 95       	ret

00000632 <__itoa_ncheck>:
 632:	bb 27       	eor	r27, r27
 634:	4a 30       	cpi	r20, 0x0A	; 10
 636:	31 f4       	brne	.+12     	; 0x644 <__itoa_ncheck+0x12>
 638:	99 23       	and	r25, r25
 63a:	22 f4       	brpl	.+8      	; 0x644 <__itoa_ncheck+0x12>
 63c:	bd e2       	ldi	r27, 0x2D	; 45
 63e:	90 95       	com	r25
 640:	81 95       	neg	r24
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	01 c0       	rjmp	.+2      	; 0x648 <__utoa_common>

00000646 <__utoa_ncheck>:
 646:	bb 27       	eor	r27, r27

00000648 <__utoa_common>:
 648:	fb 01       	movw	r30, r22
 64a:	55 27       	eor	r21, r21
 64c:	aa 27       	eor	r26, r26
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	aa 1f       	adc	r26, r26
 654:	a4 17       	cp	r26, r20
 656:	10 f0       	brcs	.+4      	; 0x65c <__utoa_common+0x14>
 658:	a4 1b       	sub	r26, r20
 65a:	83 95       	inc	r24
 65c:	50 51       	subi	r21, 0x10	; 16
 65e:	b9 f7       	brne	.-18     	; 0x64e <__utoa_common+0x6>
 660:	a0 5d       	subi	r26, 0xD0	; 208
 662:	aa 33       	cpi	r26, 0x3A	; 58
 664:	08 f0       	brcs	.+2      	; 0x668 <__utoa_common+0x20>
 666:	a9 5d       	subi	r26, 0xD9	; 217
 668:	a1 93       	st	Z+, r26
 66a:	00 97       	sbiw	r24, 0x00	; 0
 66c:	79 f7       	brne	.-34     	; 0x64c <__utoa_common+0x4>
 66e:	b1 11       	cpse	r27, r1
 670:	b1 93       	st	Z+, r27
 672:	11 92       	st	Z+, r1
 674:	cb 01       	movw	r24, r22
 676:	00 c0       	rjmp	.+0      	; 0x678 <strrev>

00000678 <strrev>:
 678:	dc 01       	movw	r26, r24
 67a:	fc 01       	movw	r30, r24
 67c:	67 2f       	mov	r22, r23
 67e:	71 91       	ld	r23, Z+
 680:	77 23       	and	r23, r23
 682:	e1 f7       	brne	.-8      	; 0x67c <strrev+0x4>
 684:	32 97       	sbiw	r30, 0x02	; 2
 686:	04 c0       	rjmp	.+8      	; 0x690 <strrev+0x18>
 688:	7c 91       	ld	r23, X
 68a:	6d 93       	st	X+, r22
 68c:	70 83       	st	Z, r23
 68e:	62 91       	ld	r22, -Z
 690:	ae 17       	cp	r26, r30
 692:	bf 07       	cpc	r27, r31
 694:	c8 f3       	brcs	.-14     	; 0x688 <strrev+0x10>
 696:	08 95       	ret

00000698 <_exit>:
 698:	f8 94       	cli

0000069a <__stop_program>:
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__stop_program>
