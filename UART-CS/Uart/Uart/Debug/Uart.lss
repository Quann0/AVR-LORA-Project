
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000063a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000006ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bbd  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091d  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046e  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049e  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c7  00000000  00000000  00002652  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c1       	rjmp	.+666    	; 0x2e4 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	db d0       	rcall	.+438    	; 0x260 <main>
  aa:	c5 c2       	rjmp	.+1418   	; 0x636 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <uart_char_tx>:
#include <string.h>
//char data[4];
char data[2];
void uart_char_tx(unsigned char chr) 
{
	while (bit_is_clear(UCSR0A,UDRE0)) { };
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <uart_char_tx>
	UDR0=chr;
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	08 95       	ret

000000b6 <uart1_char_tx>:
}
void uart1_char_tx(char chr)
{
	while (bit_is_clear(UCSR1A,UDRE1)) { };
  b6:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  ba:	95 ff       	sbrs	r25, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <uart1_char_tx>
	UDR1=chr;
  be:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  c2:	08 95       	ret

000000c4 <gui_1_chuoi_dulieu>:
}
void gui_1_chuoi_dulieu( char a[2])
{
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	8c 01       	movw	r16, r24
	for(int i=0;i<strlen(a);i++)
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	06 c0       	rjmp	.+12     	; 0xe0 <gui_1_chuoi_dulieu+0x1c>
	{
		uart1_char_tx(a[i]);
  d4:	f8 01       	movw	r30, r16
  d6:	ec 0f       	add	r30, r28
  d8:	fd 1f       	adc	r31, r29
  da:	80 81       	ld	r24, Z
  dc:	ec df       	rcall	.-40     	; 0xb6 <uart1_char_tx>
	while (bit_is_clear(UCSR1A,UDRE1)) { };
	UDR1=chr;
}
void gui_1_chuoi_dulieu( char a[2])
{
	for(int i=0;i<strlen(a);i++)
  de:	21 96       	adiw	r28, 0x01	; 1
  e0:	f8 01       	movw	r30, r16
  e2:	01 90       	ld	r0, Z+
  e4:	00 20       	and	r0, r0
  e6:	e9 f7       	brne	.-6      	; 0xe2 <gui_1_chuoi_dulieu+0x1e>
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	e0 1b       	sub	r30, r16
  ec:	f1 0b       	sbc	r31, r17
  ee:	ce 17       	cp	r28, r30
  f0:	df 07       	cpc	r29, r31
  f2:	80 f3       	brcs	.-32     	; 0xd4 <gui_1_chuoi_dulieu+0x10>
	{
		uart1_char_tx(a[i]);
	//	_delay_ms(100);
	}
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <read_adc>:
uint16_t read_adc(unsigned int adc_channel) //adc_channel l?u tham s? kênh ADC c?n ??c.
{
	ADMUX |= adc_channel; //Ch?n kênh ADC.
  fe:	97 b1       	in	r25, 0x07	; 7
 100:	89 2b       	or	r24, r25
 102:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADSC); //Cho phép b?t ??u quá tr?nh chuy?n ??i ADC: l?y giá tr? ?i?n áp vào (Vin) trên kênh ?? ch?n, sau ?ó th?c hi?n chuy?n ??i ADC theo công th?c:
 104:	86 b1       	in	r24, 0x06	; 6
 106:	80 64       	ori	r24, 0x40	; 64
 108:	86 b9       	out	0x06, r24	; 6
	while(bit_is_clear(ADCSRA,ADIF)) //trong khi th?c hi?n chuy?n ??i ADC (bit ADIF = 0).
 10a:	34 9b       	sbis	0x06, 4	; 6
 10c:	fe cf       	rjmp	.-4      	; 0x10a <read_adc+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f e7       	ldi	r18, 0x7F	; 127
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <read_adc+0x16>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <read_adc+0x20>
 11e:	00 00       	nop
		; //Ch? trong quá tr?nh chuy?n ??i ADC, sau khi chuy?n ??i xong th? bit ADIF = 1.
	}
	_delay_ms(50);
	//Ho?c có th? s? d?ng l?nh loop nh? sau ?? thay th? cho l?nh while bên trên:
	//	loop_until_bit_is_set(ADCSRA,ADIF);
	return ADCW; //Giá tr? chuy?n ??i ???c l?u vào thanh ghi ADCW 16 bit.
 120:	84 b1       	in	r24, 0x04	; 4
 122:	95 b1       	in	r25, 0x05	; 5
}
 124:	08 95       	ret

00000126 <led7seg>:
void led7seg(uint16_t ADC_val) {
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	8c 01       	movw	r16, r24
	uint16_t nghin,tram,chuc,donvi;
	donvi = ADC_val % 10; //L?y giá tr? ADC chia cho 10 l?y ph?n d? gán vào bi?n donvi.
 134:	9c 01       	movw	r18, r24
 136:	ad ec       	ldi	r26, 0xCD	; 205
 138:	bc ec       	ldi	r27, 0xCC	; 204
 13a:	31 d2       	rcall	.+1122   	; 0x59e <__umulhisi3>
 13c:	ac 01       	movw	r20, r24
 13e:	56 95       	lsr	r21
 140:	47 95       	ror	r20
 142:	56 95       	lsr	r21
 144:	47 95       	ror	r20
 146:	56 95       	lsr	r21
 148:	47 95       	ror	r20
 14a:	ca 01       	movw	r24, r20
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	48 0f       	add	r20, r24
 15e:	59 1f       	adc	r21, r25
 160:	c8 01       	movw	r24, r16
 162:	84 1b       	sub	r24, r20
 164:	95 0b       	sbc	r25, r21
 166:	ac 01       	movw	r20, r24
	ADC_val /= 10; //L?y giá tr? ADC chia cho 10 l?y ph?n nguyên gán vào bi?n ADC_val
 168:	1a d2       	rcall	.+1076   	; 0x59e <__umulhisi3>
 16a:	ec 01       	movw	r28, r24
 16c:	d6 95       	lsr	r29
 16e:	c7 95       	ror	r28
 170:	d6 95       	lsr	r29
 172:	c7 95       	ror	r28
 174:	d6 95       	lsr	r29
 176:	c7 95       	ror	r28
	chuc = ADC_val % 10;
 178:	9e 01       	movw	r18, r28
 17a:	11 d2       	rcall	.+1058   	; 0x59e <__umulhisi3>
 17c:	fc 01       	movw	r30, r24
 17e:	f6 95       	lsr	r31
 180:	e7 95       	ror	r30
 182:	f6 95       	lsr	r31
 184:	e7 95       	ror	r30
 186:	f6 95       	lsr	r31
 188:	e7 95       	ror	r30
 18a:	cf 01       	movw	r24, r30
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	e8 0f       	add	r30, r24
 19e:	f9 1f       	adc	r31, r25
 1a0:	ce 01       	movw	r24, r28
 1a2:	8e 1b       	sub	r24, r30
 1a4:	9f 0b       	sbc	r25, r31
 1a6:	fc 01       	movw	r30, r24
 1a8:	98 01       	movw	r18, r16
	ADC_val /= 10;
 1aa:	36 95       	lsr	r19
 1ac:	27 95       	ror	r18
 1ae:	36 95       	lsr	r19
 1b0:	27 95       	ror	r18
 1b2:	ab e7       	ldi	r26, 0x7B	; 123
 1b4:	b4 e1       	ldi	r27, 0x14	; 20
 1b6:	f3 d1       	rcall	.+998    	; 0x59e <__umulhisi3>
 1b8:	7c 01       	movw	r14, r24
 1ba:	f6 94       	lsr	r15
 1bc:	e7 94       	ror	r14
 1be:	97 01       	movw	r18, r14
	tram = ADC_val % 10;
 1c0:	ad ec       	ldi	r26, 0xCD	; 205
 1c2:	bc ec       	ldi	r27, 0xCC	; 204
 1c4:	ec d1       	rcall	.+984    	; 0x59e <__umulhisi3>
 1c6:	ec 01       	movw	r28, r24
 1c8:	d6 95       	lsr	r29
 1ca:	c7 95       	ror	r28
 1cc:	d6 95       	lsr	r29
 1ce:	c7 95       	ror	r28
 1d0:	d6 95       	lsr	r29
 1d2:	c7 95       	ror	r28
 1d4:	ce 01       	movw	r24, r28
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	cc 0f       	add	r28, r28
 1dc:	dd 1f       	adc	r29, r29
 1de:	cc 0f       	add	r28, r28
 1e0:	dd 1f       	adc	r29, r29
 1e2:	cc 0f       	add	r28, r28
 1e4:	dd 1f       	adc	r29, r29
 1e6:	c8 0f       	add	r28, r24
 1e8:	d9 1f       	adc	r29, r25
 1ea:	c7 01       	movw	r24, r14
 1ec:	8c 1b       	sub	r24, r28
 1ee:	9d 0b       	sbc	r25, r29
 1f0:	ec 01       	movw	r28, r24
 1f2:	98 01       	movw	r18, r16
 1f4:	36 95       	lsr	r19
	ADC_val /= 10;
 1f6:	27 95       	ror	r18
 1f8:	36 95       	lsr	r19
 1fa:	27 95       	ror	r18
 1fc:	36 95       	lsr	r19
 1fe:	27 95       	ror	r18
 200:	a5 ec       	ldi	r26, 0xC5	; 197
 202:	b0 e2       	ldi	r27, 0x20	; 32
 204:	cc d1       	rcall	.+920    	; 0x59e <__umulhisi3>
 206:	92 95       	swap	r25
 208:	82 95       	swap	r24
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	89 27       	eor	r24, r25
 20e:	9f 70       	andi	r25, 0x0F	; 15
 210:	89 27       	eor	r24, r25
 212:	80 61       	ori	r24, 0x10	; 16
 214:	8b bb       	out	0x1b, r24	; 27
	nghin = ADC_val;
	PORTA = nghin|(1<<PA4);//(1<<PE4):c?p ngu?n cho led hàng ngh?n sau ?ó OR v?i nghin.
 216:	8f ec       	ldi	r24, 0xCF	; 207
 218:	97 e0       	ldi	r25, 0x07	; 7
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <led7seg+0xf4>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <led7seg+0xfa>
 220:	00 00       	nop
 222:	c0 62       	ori	r28, 0x20	; 32
 224:	cb bb       	out	0x1b, r28	; 27
	_delay_ms(1);
	PORTA = tram|(1<<PA5); //(1<<PE5):c?p ngu?n cho led hàng tr?m sau ?ó OR v?i tram.
 226:	8f ec       	ldi	r24, 0xCF	; 207
 228:	97 e0       	ldi	r25, 0x07	; 7
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <led7seg+0x104>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <led7seg+0x10a>
 230:	00 00       	nop
 232:	e0 64       	ori	r30, 0x40	; 64
 234:	eb bb       	out	0x1b, r30	; 27
	_delay_ms(1);
	PORTA = chuc|(1<<PA6);//(1<<PE6):c?p ngu?n cho led hàng ch?c sau ?ó OR v?i chuc.
 236:	8f ec       	ldi	r24, 0xCF	; 207
 238:	97 e0       	ldi	r25, 0x07	; 7
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <led7seg+0x114>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <led7seg+0x11a>
 240:	00 00       	nop
 242:	40 68       	ori	r20, 0x80	; 128
 244:	4b bb       	out	0x1b, r20	; 27
	_delay_ms(1);
	PORTA = donvi|(1<<PA7);//(1<<PE7):c?p ngu?n cho led hàng ??n v? sau ?ó OR v?i donvi.
 246:	8f ec       	ldi	r24, 0xCF	; 207
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <led7seg+0x124>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <led7seg+0x12a>
 250:	00 00       	nop
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
	_delay_ms(1);
}
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	08 95       	ret

00000260 <main>:
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	8a bb       	out	0x1a, r24	; 26
volatile unsigned char u_data;
int main(void){
	//Baudrate 9600, t?n s? f=8MHz
	//C?u h?nh UART0
	DDRA = 0xFF;
	DDRB = 0xff;
 264:	87 bb       	out	0x17, r24	; 23
	//DDRF = 0x00 ;
	//PORTF =0xff;
	
	UBRR0H=0;
 266:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=51;
 26a:	83 e3       	ldi	r24, 0x33	; 51
 26c:	89 b9       	out	0x09, r24	; 9
	UBRR1H=0;
 26e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L=51;
 272:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR0A=0x00;
 276:	1b b8       	out	0x0b, r1	; 11
	UCSR0C =(1<<UCSZ01)|(1<<UCSZ00);
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UCSR0B =(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); //cho phép truy?n nh?n d? li?u và cho phép ng?t nh?n
 27e:	98 e9       	ldi	r25, 0x98	; 152
 280:	9a b9       	out	0x0a, r25	; 10
	UCSR1A=0x00;
 282:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1C =(1<<UCSZ11)|(1<<UCSZ10);
 286:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UCSR1B |=(1<<TXEN1)|(1<<TXCIE1);
 28a:	ea e9       	ldi	r30, 0x9A	; 154
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	88 64       	ori	r24, 0x48	; 72
 292:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Ch?n ?i?n áp tham chi?u AVCC
 294:	87 b1       	in	r24, 0x07	; 7
 296:	80 64       	ori	r24, 0x40	; 64
 298:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);//Cho phép ADC và ch?n h? s? chia xung nh?p cho ADC là 32.
 29a:	86 b1       	in	r24, 0x06	; 6
 29c:	85 68       	ori	r24, 0x85	; 133
 29e:	86 b9       	out	0x06, r24	; 6
	sei(); //cho phép ng?t toàn c?c (bit I
 2a0:	78 94       	sei
	uint16_t nhietdo=0;
	//float check=0;
    while (1) 
    {
		
		nhietdo = read_adc(0);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	2b df       	rcall	.-426    	; 0xfe <read_adc>
		nhietdo = nhietdo*5/10.23;
 2a8:	bc 01       	movw	r22, r24
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	68 0f       	add	r22, r24
 2b4:	79 1f       	adc	r23, r25
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	e3 d0       	rcall	.+454    	; 0x482 <__floatunsisf>
 2bc:	24 e1       	ldi	r18, 0x14	; 20
 2be:	3e ea       	ldi	r19, 0xAE	; 174
 2c0:	43 e2       	ldi	r20, 0x23	; 35
 2c2:	51 e4       	ldi	r21, 0x41	; 65
 2c4:	4a d0       	rcall	.+148    	; 0x35a <__divsf3>
 2c6:	b1 d0       	rcall	.+354    	; 0x42a <__fixunssfsi>
 2c8:	6b 01       	movw	r12, r22
 2ca:	7c 01       	movw	r14, r24
		led7seg(nhietdo);
 2cc:	cb 01       	movw	r24, r22
 2ce:	2b df       	rcall	.-426    	; 0x126 <led7seg>
 2d0:	4a e0       	ldi	r20, 0x0A	; 10
		//_delay_ms(5);
		//itoa(nhietdo,data,10);
	//	if(check!=nhietdo)
	//	{
			itoa(nhietdo,data,10);
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	71 e0       	ldi	r23, 0x01	; 1
 2d8:	c6 01       	movw	r24, r12
 2da:	70 d1       	rcall	.+736    	; 0x5bc <itoa>
			gui_1_chuoi_dulieu(data);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	f1 de       	rcall	.-542    	; 0xc4 <gui_1_chuoi_dulieu>
 2e2:	df cf       	rjmp	.-66     	; 0x2a2 <main+0x42>

000002e4 <__vector_18>:
 2e4:	1f 92       	push	r1
	//	}
		
    }
}

ISR(USART0_RX_vect) { //hàm ph?c v? ng?t nh?n c?a UART0 thay cho hàm ISR(SIG_UART0_RECV)
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	0b b6       	in	r0, 0x3b	; 59
 2f0:	0f 92       	push	r0
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	u_data=UDR0;
 30a:	8c b1       	in	r24, 0x0c	; 12
 30c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <u_data>
	if(u_data =='1')
 310:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <u_data>
 314:	81 33       	cpi	r24, 0x31	; 49
 316:	21 f4       	brne	.+8      	; 0x320 <__vector_18+0x3c>
	{
		PORTB |= (1<<PB0);
 318:	88 b3       	in	r24, 0x18	; 24
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	88 bb       	out	0x18, r24	; 24
 31e:	07 c0       	rjmp	.+14     	; 0x32e <__vector_18+0x4a>
	}
	else if(u_data =='2')
 320:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <u_data>
 324:	82 33       	cpi	r24, 0x32	; 50
 326:	19 f4       	brne	.+6      	; 0x32e <__vector_18+0x4a>
	{
		PORTB &= ~(1<<PB0);
 328:	88 b3       	in	r24, 0x18	; 24
 32a:	8e 7f       	andi	r24, 0xFE	; 254
 32c:	88 bb       	out	0x18, r24	; 24
	}
	
	uart_char_tx(u_data);
 32e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <u_data>
 332:	bd de       	rcall	.-646    	; 0xae <uart_char_tx>
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0b be       	out	0x3b, r0	; 59
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <__divsf3>:
 35a:	0c d0       	rcall	.+24     	; 0x374 <__divsf3x>
 35c:	e6 c0       	rjmp	.+460    	; 0x52a <__fp_round>
 35e:	de d0       	rcall	.+444    	; 0x51c <__fp_pscB>
 360:	40 f0       	brcs	.+16     	; 0x372 <__divsf3+0x18>
 362:	d5 d0       	rcall	.+426    	; 0x50e <__fp_pscA>
 364:	30 f0       	brcs	.+12     	; 0x372 <__divsf3+0x18>
 366:	21 f4       	brne	.+8      	; 0x370 <__divsf3+0x16>
 368:	5f 3f       	cpi	r21, 0xFF	; 255
 36a:	19 f0       	breq	.+6      	; 0x372 <__divsf3+0x18>
 36c:	c7 c0       	rjmp	.+398    	; 0x4fc <__fp_inf>
 36e:	51 11       	cpse	r21, r1
 370:	10 c1       	rjmp	.+544    	; 0x592 <__fp_szero>
 372:	ca c0       	rjmp	.+404    	; 0x508 <__fp_nan>

00000374 <__divsf3x>:
 374:	eb d0       	rcall	.+470    	; 0x54c <__fp_split3>
 376:	98 f3       	brcs	.-26     	; 0x35e <__divsf3+0x4>

00000378 <__divsf3_pse>:
 378:	99 23       	and	r25, r25
 37a:	c9 f3       	breq	.-14     	; 0x36e <__divsf3+0x14>
 37c:	55 23       	and	r21, r21
 37e:	b1 f3       	breq	.-20     	; 0x36c <__divsf3+0x12>
 380:	95 1b       	sub	r25, r21
 382:	55 0b       	sbc	r21, r21
 384:	bb 27       	eor	r27, r27
 386:	aa 27       	eor	r26, r26
 388:	62 17       	cp	r22, r18
 38a:	73 07       	cpc	r23, r19
 38c:	84 07       	cpc	r24, r20
 38e:	38 f0       	brcs	.+14     	; 0x39e <__divsf3_pse+0x26>
 390:	9f 5f       	subi	r25, 0xFF	; 255
 392:	5f 4f       	sbci	r21, 0xFF	; 255
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	44 1f       	adc	r20, r20
 39a:	aa 1f       	adc	r26, r26
 39c:	a9 f3       	breq	.-22     	; 0x388 <__divsf3_pse+0x10>
 39e:	33 d0       	rcall	.+102    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3a0:	0e 2e       	mov	r0, r30
 3a2:	3a f0       	brmi	.+14     	; 0x3b2 <__divsf3_pse+0x3a>
 3a4:	e0 e8       	ldi	r30, 0x80	; 128
 3a6:	30 d0       	rcall	.+96     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3a8:	91 50       	subi	r25, 0x01	; 1
 3aa:	50 40       	sbci	r21, 0x00	; 0
 3ac:	e6 95       	lsr	r30
 3ae:	00 1c       	adc	r0, r0
 3b0:	ca f7       	brpl	.-14     	; 0x3a4 <__divsf3_pse+0x2c>
 3b2:	29 d0       	rcall	.+82     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3b4:	fe 2f       	mov	r31, r30
 3b6:	27 d0       	rcall	.+78     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	88 1f       	adc	r24, r24
 3be:	bb 1f       	adc	r27, r27
 3c0:	26 17       	cp	r18, r22
 3c2:	37 07       	cpc	r19, r23
 3c4:	48 07       	cpc	r20, r24
 3c6:	ab 07       	cpc	r26, r27
 3c8:	b0 e8       	ldi	r27, 0x80	; 128
 3ca:	09 f0       	breq	.+2      	; 0x3ce <__divsf3_pse+0x56>
 3cc:	bb 0b       	sbc	r27, r27
 3ce:	80 2d       	mov	r24, r0
 3d0:	bf 01       	movw	r22, r30
 3d2:	ff 27       	eor	r31, r31
 3d4:	93 58       	subi	r25, 0x83	; 131
 3d6:	5f 4f       	sbci	r21, 0xFF	; 255
 3d8:	2a f0       	brmi	.+10     	; 0x3e4 <__divsf3_pse+0x6c>
 3da:	9e 3f       	cpi	r25, 0xFE	; 254
 3dc:	51 05       	cpc	r21, r1
 3de:	68 f0       	brcs	.+26     	; 0x3fa <__divsf3_pse+0x82>
 3e0:	8d c0       	rjmp	.+282    	; 0x4fc <__fp_inf>
 3e2:	d7 c0       	rjmp	.+430    	; 0x592 <__fp_szero>
 3e4:	5f 3f       	cpi	r21, 0xFF	; 255
 3e6:	ec f3       	brlt	.-6      	; 0x3e2 <__divsf3_pse+0x6a>
 3e8:	98 3e       	cpi	r25, 0xE8	; 232
 3ea:	dc f3       	brlt	.-10     	; 0x3e2 <__divsf3_pse+0x6a>
 3ec:	86 95       	lsr	r24
 3ee:	77 95       	ror	r23
 3f0:	67 95       	ror	r22
 3f2:	b7 95       	ror	r27
 3f4:	f7 95       	ror	r31
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	c9 f7       	brne	.-14     	; 0x3ec <__divsf3_pse+0x74>
 3fa:	88 0f       	add	r24, r24
 3fc:	91 1d       	adc	r25, r1
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	97 f9       	bld	r25, 7
 404:	08 95       	ret
 406:	e1 e0       	ldi	r30, 0x01	; 1
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	bb 1f       	adc	r27, r27
 410:	62 17       	cp	r22, r18
 412:	73 07       	cpc	r23, r19
 414:	84 07       	cpc	r24, r20
 416:	ba 07       	cpc	r27, r26
 418:	20 f0       	brcs	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41a:	62 1b       	sub	r22, r18
 41c:	73 0b       	sbc	r23, r19
 41e:	84 0b       	sbc	r24, r20
 420:	ba 0b       	sbc	r27, r26
 422:	ee 1f       	adc	r30, r30
 424:	88 f7       	brcc	.-30     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 426:	e0 95       	com	r30
 428:	08 95       	ret

0000042a <__fixunssfsi>:
 42a:	98 d0       	rcall	.+304    	; 0x55c <__fp_splitA>
 42c:	88 f0       	brcs	.+34     	; 0x450 <__fixunssfsi+0x26>
 42e:	9f 57       	subi	r25, 0x7F	; 127
 430:	90 f0       	brcs	.+36     	; 0x456 <__fixunssfsi+0x2c>
 432:	b9 2f       	mov	r27, r25
 434:	99 27       	eor	r25, r25
 436:	b7 51       	subi	r27, 0x17	; 23
 438:	a0 f0       	brcs	.+40     	; 0x462 <__fixunssfsi+0x38>
 43a:	d1 f0       	breq	.+52     	; 0x470 <__fixunssfsi+0x46>
 43c:	66 0f       	add	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	88 1f       	adc	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	1a f0       	brmi	.+6      	; 0x44c <__fixunssfsi+0x22>
 446:	ba 95       	dec	r27
 448:	c9 f7       	brne	.-14     	; 0x43c <__fixunssfsi+0x12>
 44a:	12 c0       	rjmp	.+36     	; 0x470 <__fixunssfsi+0x46>
 44c:	b1 30       	cpi	r27, 0x01	; 1
 44e:	81 f0       	breq	.+32     	; 0x470 <__fixunssfsi+0x46>
 450:	9f d0       	rcall	.+318    	; 0x590 <__fp_zero>
 452:	b1 e0       	ldi	r27, 0x01	; 1
 454:	08 95       	ret
 456:	9c c0       	rjmp	.+312    	; 0x590 <__fp_zero>
 458:	67 2f       	mov	r22, r23
 45a:	78 2f       	mov	r23, r24
 45c:	88 27       	eor	r24, r24
 45e:	b8 5f       	subi	r27, 0xF8	; 248
 460:	39 f0       	breq	.+14     	; 0x470 <__fixunssfsi+0x46>
 462:	b9 3f       	cpi	r27, 0xF9	; 249
 464:	cc f3       	brlt	.-14     	; 0x458 <__fixunssfsi+0x2e>
 466:	86 95       	lsr	r24
 468:	77 95       	ror	r23
 46a:	67 95       	ror	r22
 46c:	b3 95       	inc	r27
 46e:	d9 f7       	brne	.-10     	; 0x466 <__fixunssfsi+0x3c>
 470:	3e f4       	brtc	.+14     	; 0x480 <__fixunssfsi+0x56>
 472:	90 95       	com	r25
 474:	80 95       	com	r24
 476:	70 95       	com	r23
 478:	61 95       	neg	r22
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	08 95       	ret

00000482 <__floatunsisf>:
 482:	e8 94       	clt
 484:	09 c0       	rjmp	.+18     	; 0x498 <__floatsisf+0x12>

00000486 <__floatsisf>:
 486:	97 fb       	bst	r25, 7
 488:	3e f4       	brtc	.+14     	; 0x498 <__floatsisf+0x12>
 48a:	90 95       	com	r25
 48c:	80 95       	com	r24
 48e:	70 95       	com	r23
 490:	61 95       	neg	r22
 492:	7f 4f       	sbci	r23, 0xFF	; 255
 494:	8f 4f       	sbci	r24, 0xFF	; 255
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	99 23       	and	r25, r25
 49a:	a9 f0       	breq	.+42     	; 0x4c6 <__floatsisf+0x40>
 49c:	f9 2f       	mov	r31, r25
 49e:	96 e9       	ldi	r25, 0x96	; 150
 4a0:	bb 27       	eor	r27, r27
 4a2:	93 95       	inc	r25
 4a4:	f6 95       	lsr	r31
 4a6:	87 95       	ror	r24
 4a8:	77 95       	ror	r23
 4aa:	67 95       	ror	r22
 4ac:	b7 95       	ror	r27
 4ae:	f1 11       	cpse	r31, r1
 4b0:	f8 cf       	rjmp	.-16     	; 0x4a2 <__floatsisf+0x1c>
 4b2:	fa f4       	brpl	.+62     	; 0x4f2 <__floatsisf+0x6c>
 4b4:	bb 0f       	add	r27, r27
 4b6:	11 f4       	brne	.+4      	; 0x4bc <__floatsisf+0x36>
 4b8:	60 ff       	sbrs	r22, 0
 4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <__floatsisf+0x6c>
 4bc:	6f 5f       	subi	r22, 0xFF	; 255
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	16 c0       	rjmp	.+44     	; 0x4f2 <__floatsisf+0x6c>
 4c6:	88 23       	and	r24, r24
 4c8:	11 f0       	breq	.+4      	; 0x4ce <__floatsisf+0x48>
 4ca:	96 e9       	ldi	r25, 0x96	; 150
 4cc:	11 c0       	rjmp	.+34     	; 0x4f0 <__floatsisf+0x6a>
 4ce:	77 23       	and	r23, r23
 4d0:	21 f0       	breq	.+8      	; 0x4da <__floatsisf+0x54>
 4d2:	9e e8       	ldi	r25, 0x8E	; 142
 4d4:	87 2f       	mov	r24, r23
 4d6:	76 2f       	mov	r23, r22
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <__floatsisf+0x5e>
 4da:	66 23       	and	r22, r22
 4dc:	71 f0       	breq	.+28     	; 0x4fa <__floatsisf+0x74>
 4de:	96 e8       	ldi	r25, 0x86	; 134
 4e0:	86 2f       	mov	r24, r22
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	2a f0       	brmi	.+10     	; 0x4f2 <__floatsisf+0x6c>
 4e8:	9a 95       	dec	r25
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	da f7       	brpl	.-10     	; 0x4e8 <__floatsisf+0x62>
 4f2:	88 0f       	add	r24, r24
 4f4:	96 95       	lsr	r25
 4f6:	87 95       	ror	r24
 4f8:	97 f9       	bld	r25, 7
 4fa:	08 95       	ret

000004fc <__fp_inf>:
 4fc:	97 f9       	bld	r25, 7
 4fe:	9f 67       	ori	r25, 0x7F	; 127
 500:	80 e8       	ldi	r24, 0x80	; 128
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	08 95       	ret

00000508 <__fp_nan>:
 508:	9f ef       	ldi	r25, 0xFF	; 255
 50a:	80 ec       	ldi	r24, 0xC0	; 192
 50c:	08 95       	ret

0000050e <__fp_pscA>:
 50e:	00 24       	eor	r0, r0
 510:	0a 94       	dec	r0
 512:	16 16       	cp	r1, r22
 514:	17 06       	cpc	r1, r23
 516:	18 06       	cpc	r1, r24
 518:	09 06       	cpc	r0, r25
 51a:	08 95       	ret

0000051c <__fp_pscB>:
 51c:	00 24       	eor	r0, r0
 51e:	0a 94       	dec	r0
 520:	12 16       	cp	r1, r18
 522:	13 06       	cpc	r1, r19
 524:	14 06       	cpc	r1, r20
 526:	05 06       	cpc	r0, r21
 528:	08 95       	ret

0000052a <__fp_round>:
 52a:	09 2e       	mov	r0, r25
 52c:	03 94       	inc	r0
 52e:	00 0c       	add	r0, r0
 530:	11 f4       	brne	.+4      	; 0x536 <__fp_round+0xc>
 532:	88 23       	and	r24, r24
 534:	52 f0       	brmi	.+20     	; 0x54a <__fp_round+0x20>
 536:	bb 0f       	add	r27, r27
 538:	40 f4       	brcc	.+16     	; 0x54a <__fp_round+0x20>
 53a:	bf 2b       	or	r27, r31
 53c:	11 f4       	brne	.+4      	; 0x542 <__fp_round+0x18>
 53e:	60 ff       	sbrs	r22, 0
 540:	04 c0       	rjmp	.+8      	; 0x54a <__fp_round+0x20>
 542:	6f 5f       	subi	r22, 0xFF	; 255
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	8f 4f       	sbci	r24, 0xFF	; 255
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	08 95       	ret

0000054c <__fp_split3>:
 54c:	57 fd       	sbrc	r21, 7
 54e:	90 58       	subi	r25, 0x80	; 128
 550:	44 0f       	add	r20, r20
 552:	55 1f       	adc	r21, r21
 554:	59 f0       	breq	.+22     	; 0x56c <__fp_splitA+0x10>
 556:	5f 3f       	cpi	r21, 0xFF	; 255
 558:	71 f0       	breq	.+28     	; 0x576 <__fp_splitA+0x1a>
 55a:	47 95       	ror	r20

0000055c <__fp_splitA>:
 55c:	88 0f       	add	r24, r24
 55e:	97 fb       	bst	r25, 7
 560:	99 1f       	adc	r25, r25
 562:	61 f0       	breq	.+24     	; 0x57c <__fp_splitA+0x20>
 564:	9f 3f       	cpi	r25, 0xFF	; 255
 566:	79 f0       	breq	.+30     	; 0x586 <__fp_splitA+0x2a>
 568:	87 95       	ror	r24
 56a:	08 95       	ret
 56c:	12 16       	cp	r1, r18
 56e:	13 06       	cpc	r1, r19
 570:	14 06       	cpc	r1, r20
 572:	55 1f       	adc	r21, r21
 574:	f2 cf       	rjmp	.-28     	; 0x55a <__fp_split3+0xe>
 576:	46 95       	lsr	r20
 578:	f1 df       	rcall	.-30     	; 0x55c <__fp_splitA>
 57a:	08 c0       	rjmp	.+16     	; 0x58c <__fp_splitA+0x30>
 57c:	16 16       	cp	r1, r22
 57e:	17 06       	cpc	r1, r23
 580:	18 06       	cpc	r1, r24
 582:	99 1f       	adc	r25, r25
 584:	f1 cf       	rjmp	.-30     	; 0x568 <__fp_splitA+0xc>
 586:	86 95       	lsr	r24
 588:	71 05       	cpc	r23, r1
 58a:	61 05       	cpc	r22, r1
 58c:	08 94       	sec
 58e:	08 95       	ret

00000590 <__fp_zero>:
 590:	e8 94       	clt

00000592 <__fp_szero>:
 592:	bb 27       	eor	r27, r27
 594:	66 27       	eor	r22, r22
 596:	77 27       	eor	r23, r23
 598:	cb 01       	movw	r24, r22
 59a:	97 f9       	bld	r25, 7
 59c:	08 95       	ret

0000059e <__umulhisi3>:
 59e:	a2 9f       	mul	r26, r18
 5a0:	b0 01       	movw	r22, r0
 5a2:	b3 9f       	mul	r27, r19
 5a4:	c0 01       	movw	r24, r0
 5a6:	a3 9f       	mul	r26, r19
 5a8:	70 0d       	add	r23, r0
 5aa:	81 1d       	adc	r24, r1
 5ac:	11 24       	eor	r1, r1
 5ae:	91 1d       	adc	r25, r1
 5b0:	b2 9f       	mul	r27, r18
 5b2:	70 0d       	add	r23, r0
 5b4:	81 1d       	adc	r24, r1
 5b6:	11 24       	eor	r1, r1
 5b8:	91 1d       	adc	r25, r1
 5ba:	08 95       	ret

000005bc <itoa>:
 5bc:	45 32       	cpi	r20, 0x25	; 37
 5be:	51 05       	cpc	r21, r1
 5c0:	18 f4       	brcc	.+6      	; 0x5c8 <itoa+0xc>
 5c2:	42 30       	cpi	r20, 0x02	; 2
 5c4:	08 f0       	brcs	.+2      	; 0x5c8 <itoa+0xc>
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__itoa_ncheck>
 5c8:	fb 01       	movw	r30, r22
 5ca:	10 82       	st	Z, r1
 5cc:	cb 01       	movw	r24, r22
 5ce:	08 95       	ret

000005d0 <__itoa_ncheck>:
 5d0:	bb 27       	eor	r27, r27
 5d2:	4a 30       	cpi	r20, 0x0A	; 10
 5d4:	31 f4       	brne	.+12     	; 0x5e2 <__itoa_ncheck+0x12>
 5d6:	99 23       	and	r25, r25
 5d8:	22 f4       	brpl	.+8      	; 0x5e2 <__itoa_ncheck+0x12>
 5da:	bd e2       	ldi	r27, 0x2D	; 45
 5dc:	90 95       	com	r25
 5de:	81 95       	neg	r24
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <__utoa_common>

000005e4 <__utoa_ncheck>:
 5e4:	bb 27       	eor	r27, r27

000005e6 <__utoa_common>:
 5e6:	fb 01       	movw	r30, r22
 5e8:	55 27       	eor	r21, r21
 5ea:	aa 27       	eor	r26, r26
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	aa 1f       	adc	r26, r26
 5f2:	a4 17       	cp	r26, r20
 5f4:	10 f0       	brcs	.+4      	; 0x5fa <__utoa_common+0x14>
 5f6:	a4 1b       	sub	r26, r20
 5f8:	83 95       	inc	r24
 5fa:	50 51       	subi	r21, 0x10	; 16
 5fc:	b9 f7       	brne	.-18     	; 0x5ec <__utoa_common+0x6>
 5fe:	a0 5d       	subi	r26, 0xD0	; 208
 600:	aa 33       	cpi	r26, 0x3A	; 58
 602:	08 f0       	brcs	.+2      	; 0x606 <__utoa_common+0x20>
 604:	a9 5d       	subi	r26, 0xD9	; 217
 606:	a1 93       	st	Z+, r26
 608:	00 97       	sbiw	r24, 0x00	; 0
 60a:	79 f7       	brne	.-34     	; 0x5ea <__utoa_common+0x4>
 60c:	b1 11       	cpse	r27, r1
 60e:	b1 93       	st	Z+, r27
 610:	11 92       	st	Z+, r1
 612:	cb 01       	movw	r24, r22
 614:	00 c0       	rjmp	.+0      	; 0x616 <strrev>

00000616 <strrev>:
 616:	dc 01       	movw	r26, r24
 618:	fc 01       	movw	r30, r24
 61a:	67 2f       	mov	r22, r23
 61c:	71 91       	ld	r23, Z+
 61e:	77 23       	and	r23, r23
 620:	e1 f7       	brne	.-8      	; 0x61a <strrev+0x4>
 622:	32 97       	sbiw	r30, 0x02	; 2
 624:	04 c0       	rjmp	.+8      	; 0x62e <strrev+0x18>
 626:	7c 91       	ld	r23, X
 628:	6d 93       	st	X+, r22
 62a:	70 83       	st	Z, r23
 62c:	62 91       	ld	r22, -Z
 62e:	ae 17       	cp	r26, r30
 630:	bf 07       	cpc	r27, r31
 632:	c8 f3       	brcs	.-14     	; 0x626 <strrev+0x10>
 634:	08 95       	ret

00000636 <_exit>:
 636:	f8 94       	cli

00000638 <__stop_program>:
 638:	ff cf       	rjmp	.-2      	; 0x638 <__stop_program>
